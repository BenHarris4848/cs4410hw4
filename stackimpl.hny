from synch import Lock, acquire, release
from alloc import malloc, free

def Stack():
    result = { .top: None, .lock: Lock() }

def push(s, v):
    acquire(?s->lock)
    let node = malloc({ .value: v, .next: s->top }):
        s->top = node
    release(?s->lock)

def pop(s):
    acquire(?s->lock)
    let node = s->top:
        if node == None:
            result = None
        else:
            result = node->value
            s->top = node->next
            free(node)
    release(?s->lock)

def swap(s):
    acquire(?s->lock)
    var node1 = pop(s)
    if not (node1 == None):
        var node2 = pop(s)
        if not (node2 == None):
            push(s,node1->value)
            push(s,node2->value)
        else:
            push(s,node1->value)
    release(?s->lock)