from synch import Lock, acquire, release
from alloc import malloc, free

def Stack():
    result = { .top: None, .lock: Lock() }

def push(s, v):
    acquire(?s->lock)
    let node = malloc({ .value: v, .next: s->top }):
        s->top = node
    release(?s->lock)

def pop(s):
    acquire(?s->lock)
    let node = s->top:
        if node == None:
            result = None
        else:
            result = node->value
            s->top = node->next
            free(node)
    release(?s->lock)

def swap(s):
    acquire(?s->lock)
    var node1 = s->top
    if not (node1 == None):
        var node2 = node1->next
        if not (node2 == None):
            node1->next=node2->next
            node2->next=node1
            s->top=node2
    release(?s->lock)