{
  "issue": "Non-terminating state",
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "xhash": "1572ad3b3d7",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "4",
          "trace": [
            {
              "pc": "1",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "0"
        },
        {
          "npc": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1"
        },
        {
          "shared": { "stack": { "type": "dict", "value": [] } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },
        {
          "npc": "4",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "3"
        },
        {
          "shared": { "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "5",
          "pop": "1",
          "push": [ ],
          "pc": "4"
        },
        {
          "npc": "6",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "5"
        },
        {
          "shared": { "list": { "type": "dict", "value": [] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "7",
          "pop": "1",
          "push": [ ],
          "pc": "6"
        },
        {
          "npc": "371",
          "push": [ ],
          "pc": "7"
        },
        {
          "npc": "372",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "371"
        },
        {
          "shared": { "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "373",
          "pop": "1",
          "push": [ ],
          "pc": "372"
        },
        {
          "npc": "1042",
          "push": [ ],
          "pc": "373"
        },
        {
          "npc": "1043",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1042"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1044",
          "pop": "1",
          "push": [ ],
          "pc": "1043"
        },
        {
          "npc": "1045",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1044"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1046",
          "pop": "1",
          "push": [ ],
          "pc": "1045"
        },
        {
          "npc": "1047",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1046"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1048",
          "pop": "1",
          "push": [ ],
          "pc": "1047"
        },
        {
          "npc": "1263",
          "push": [ ],
          "pc": "1048"
        },
        {
          "npc": "1264",
          "push": [ { "type": "pc", "value": "1089" } ],
          "pc": "1263"
        },
        {
          "npc": "1265",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1264"
        },
        {
          "npc": "1089",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1266" }, { "type": "int", "value": "2" }, { "type": "dict", "value": [] } ],
          "pc": "1265"
        },
        {
          "npc": "1090",
          "fp": "9",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "1090",
              "xpc": "1089",
              "method": "Stack()",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "4" } ],
          "pc": "1089"
        },
        {
          "npc": "1091",
          "local": { },
          "push": [ ],
          "pc": "1090"
        },
        {
          "npc": "1092",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1091"
        },
        {
          "npc": "1093",
          "push": [ { "type": "atom", "value": "top" } ],
          "pc": "1092"
        },
        {
          "npc": "1094",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1093"
        },
        {
          "npc": "1095",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1094"
        },
        {
          "npc": "1096",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1095"
        },
        {
          "npc": "1097",
          "push": [ { "type": "pc", "value": "768" } ],
          "pc": "1096"
        },
        {
          "npc": "1098",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1097"
        },
        {
          "npc": "768",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1099" }, { "type": "int", "value": "2" }, { "type": "dict", "value": [] } ],
          "pc": "1098"
        },
        {
          "npc": "769",
          "fp": "16",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "1099",
              "xpc": "1089",
              "method": "Stack()",
              "calltype": "normal",
              "vars": { }
            },
            {
              "pc": "769",
              "xpc": "768",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "9" } ],
          "pc": "768"
        },
        {
          "npc": "770",
          "local": { },
          "push": [ ],
          "pc": "769"
        },
        {
          "npc": "771",
          "push": [ { "type": "pc", "value": "761" } ],
          "pc": "770"
        },
        {
          "npc": "772",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "771"
        },
        {
          "npc": "761",
          "pop": "2",
          "push": [ { "type": "pc", "value": "773" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ],
          "pc": "772"
        },
        {
          "npc": "762",
          "fp": "21",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "1099",
              "xpc": "1089",
              "method": "Stack()",
              "calltype": "normal",
              "vars": { }
            },
            {
              "pc": "773",
              "xpc": "768",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { }
            },
            {
              "pc": "762",
              "xpc": "761",
              "method": "BinSema(False)",
              "calltype": "normal",
              "vars": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [] }, { "type": "int", "value": "16" } ],
          "pc": "761"
        },
        {
          "npc": "763",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "762"
        },
        {
          "npc": "764",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "763"
        },
        {
          "npc": "765",
          "local": { },
          "push": [ ],
          "pc": "764"
        },
        {
          "npc": "766",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "765"
        },
        {
          "npc": "773",
          "fp": "16",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "1099",
              "xpc": "1089",
              "method": "Stack()",
              "calltype": "normal",
              "vars": { }
            },
            {
              "pc": "773",
              "xpc": "768",
              "method": "Lock()",
              "calltype": "normal",
              "vars": { }
            }
          ],
          "local": { },
          "pop": "5",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "766"
        },
        {
          "npc": "774",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "773"
        },
        {
          "npc": "1099",
          "fp": "9",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            },
            {
              "pc": "1099",
              "xpc": "1089",
              "method": "Stack()",
              "calltype": "normal",
              "vars": { }
            }
          ],
          "local": { },
          "pop": "5",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "774"
        },
        {
          "npc": "1100",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1099"
        },
        {
          "npc": "1101",
          "local": { "result": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1100"
        },
        {
          "npc": "1266",
          "fp": "4",
          "trace": [
            {
              "pc": "1266",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "5",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1101"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1267",
          "pop": "1",
          "push": [ ],
          "pc": "1266"
        },
        {
          "npc": "1349",
          "push": [ ],
          "pc": "1267"
        },
        {
          "npc": "1350",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1349"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3b197",
          "name": "__init__()",
          "entry": "0",
          "pc": "1350",
          "fp": "4",
          "trace": [
            {
              "pc": "1350",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "mode": "choosing",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "2",
      "tid": "0",
      "xhash": "1572ad3b197",
      "name": "__init__()",
      "microsteps": [
        {
          "choose": { "type": "int", "value": "1" },
          "npc": "1351",
          "fp": "4",
          "trace": [
            {
              "pc": "1351",
              "xpc": "0",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ],
          "pc": "1350"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "npushes": { "type": "int", "value": "1" }, "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1352",
          "pop": "1",
          "push": [ ],
          "pc": "1351"
        },
        {
          "npc": "1353",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1352"
        },
        {
          "choose": { "type": "int", "value": "1" },
          "npc": "1354",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1353"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "npops": { "type": "int", "value": "1" }, "npushes": { "type": "int", "value": "1" }, "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1355",
          "pop": "1",
          "push": [ ],
          "pc": "1354"
        },
        {
          "npc": "1356",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1355"
        },
        {
          "choose": { "type": "int", "value": "1" },
          "npc": "1357",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1356"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "npops": { "type": "int", "value": "1" }, "npushes": { "type": "int", "value": "1" }, "nswaps": { "type": "int", "value": "1" }, "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "1358",
          "pop": "1",
          "push": [ ],
          "pc": "1357"
        },
        {
          "npc": "1359",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1358"
        },
        {
          "npc": "1360",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1359"
        },
        {
          "npc": "1361",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1360"
        },
        {
          "npc": "1362",
          "local": { "$s1185": { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1361"
        },
        {
          "npc": "1363",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1362"
        },
        {
          "npc": "1364",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1363"
        },
        {
          "npc": "1365",
          "pop": "1",
          "push": [ ],
          "pc": "1364"
        },
        {
          "npc": "1366",
          "local": { "$s1185": { "type": "set", "value": [] }, "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1365"
        },
        {
          "npc": "1367",
          "push": [ { "type": "pc", "value": "1268" } ],
          "pc": "1366"
        },
        {
          "npc": "1368",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1367"
        },
        {
          "npc": "1369",
          "local": { "$s1185": { "type": "set", "value": [] }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1368"
        },
        {
          "npc": "1370",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1369"
        },
        {
          "npc": "1371",
          "pop": "3",
          "push": [ ],
          "pc": "1370"
        },
        {
          "npc": "1362",
          "push": [ ],
          "pc": "1371"
        },
        {
          "npc": "1363",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1362"
        },
        {
          "npc": "1364",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1363"
        },
        {
          "npc": "1372",
          "pop": "1",
          "push": [ ],
          "pc": "1364"
        },
        {
          "npc": "1373",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1372"
        },
        {
          "npc": "1374",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1373"
        },
        {
          "npc": "1375",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1374"
        },
        {
          "npc": "1376",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1375"
        },
        {
          "npc": "1377",
          "local": { "$s1198": { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1376"
        },
        {
          "npc": "1378",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1377"
        },
        {
          "npc": "1379",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1378"
        },
        {
          "npc": "1380",
          "pop": "1",
          "push": [ ],
          "pc": "1379"
        },
        {
          "npc": "1381",
          "local": { "$s1198": { "type": "set", "value": [] }, "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1380"
        },
        {
          "npc": "1382",
          "push": [ { "type": "pc", "value": "1298" } ],
          "pc": "1381"
        },
        {
          "npc": "1383",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1382"
        },
        {
          "npc": "1384",
          "local": { "$s1198": { "type": "set", "value": [] }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1383"
        },
        {
          "npc": "1385",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1384"
        },
        {
          "npc": "1386",
          "pop": "3",
          "push": [ ],
          "pc": "1385"
        },
        {
          "npc": "1377",
          "push": [ ],
          "pc": "1386"
        },
        {
          "npc": "1378",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1377"
        },
        {
          "npc": "1379",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1378"
        },
        {
          "npc": "1387",
          "pop": "1",
          "push": [ ],
          "pc": "1379"
        },
        {
          "npc": "1388",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1387"
        },
        {
          "npc": "1389",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1388"
        },
        {
          "npc": "1390",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1389"
        },
        {
          "npc": "1391",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1390"
        },
        {
          "npc": "1392",
          "local": { "$s1211": { "type": "set", "value": [{ "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1391"
        },
        {
          "npc": "1393",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "1392"
        },
        {
          "npc": "1394",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1393"
        },
        {
          "npc": "1395",
          "pop": "1",
          "push": [ ],
          "pc": "1394"
        },
        {
          "npc": "1396",
          "local": { "$s1211": { "type": "set", "value": [] }, "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1395"
        },
        {
          "npc": "1397",
          "push": [ { "type": "pc", "value": "1326" } ],
          "pc": "1396"
        },
        {
          "npc": "1398",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1397"
        },
        {
          "npc": "1399",
          "local": { "$s1211": { "type": "set", "value": [] }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1398"
        },
        {
          "npc": "1400",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1399"
        },
        {
          "npc": "1401",
          "pop": "3",
          "push": [ ],
          "pc": "1400"
        },
        {
          "npc": "1392",
          "push": [ ],
          "pc": "1401"
        },
        {
          "npc": "1393",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1392"
        },
        {
          "npc": "1394",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1393"
        },
        {
          "npc": "1402",
          "pop": "1",
          "push": [ ],
          "pc": "1394"
        },
        {
          "npc": "1403",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1402"
        },
        {
          "npc": "1403",
          "fp": "0",
          "trace": [

          ],
          "local": { },
          "mode": "terminated",
          "pop": "4",
          "push": [ ],
          "pc": "1403"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3bd37",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "1298",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3c487",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "1326",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "5",
      "tid": "3",
      "xhash": "1572ad3c487",
      "name": "swap_test(1)",
      "microsteps": [
        {
          "npc": "1327",
          "fp": "4",
          "trace": [
            {
              "pc": "1327",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1326"
        },
        {
          "npc": "1328",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1327"
        },
        {
          "npc": "1329",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1328"
        },
        {
          "npc": "1330",
          "push": [ { "type": "atom", "value": "call swap" } ],
          "pc": "1329"
        },
        {
          "npc": "1331",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call swap" } } ] } ],
          "pc": "1330"
        },
        {
          "npc": "1332",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1331"
        },
        {
          "npc": "1333",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1332"
        },
        {
          "npc": "1334",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call swap" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1333"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3bd37",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "1298",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3cd27",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "1334",
          "fp": "4",
          "trace": [
            {
              "pc": "1334",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "11",
      "tid": "3",
      "xhash": "1572ad3cd27",
      "name": "swap_test(1)",
      "microsteps": [
        {
          "print": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call swap" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] },
          "npc": "1335",
          "fp": "4",
          "trace": [
            {
              "pc": "1335",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1334"
        },
        {
          "npc": "1336",
          "push": [ { "type": "pc", "value": "1187" } ],
          "pc": "1335"
        },
        {
          "npc": "1337",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1336"
        },
        {
          "npc": "1187",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1338" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1337"
        },
        {
          "npc": "1188",
          "fp": "9",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1188",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "4" } ],
          "pc": "1187"
        },
        {
          "npc": "1189",
          "push": [ { "type": "pc", "value": "784" } ],
          "pc": "1188"
        },
        {
          "npc": "1190",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1189"
        },
        {
          "npc": "1191",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1190"
        },
        {
          "npc": "1192",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1191"
        },
        {
          "npc": "784",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1193" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1192"
        },
        {
          "npc": "785",
          "fp": "14",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1193",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "785",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }, { "type": "int", "value": "9" } ],
          "pc": "784"
        },
        {
          "npc": "786",
          "atomic": "1",
          "push": [ ],
          "pc": "785"
        },
        {
          "npc": "787",
          "readonly": "1",
          "push": [ ],
          "pc": "786"
        },
        {
          "npc": "788",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "787"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3bd37",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "1298",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "157256679d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "14",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1193",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "19",
      "tid": "3",
      "xhash": "157256679d7",
      "name": "swap_test(1)",
      "microsteps": [
        {
          "npc": "789",
          "fp": "14",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1193",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "789",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } },
          "atomic": "1",
          "readonly": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" }, { "type": "pc", "value": "1338" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "4" }, { "type": "pc", "value": "1193" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }, { "type": "int", "value": "9" }, { "type": "bool", "value": "False" } ],
          "pc": "788"
        },
        {
          "npc": "790",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "789"
        },
        {
          "npc": "791",
          "pop": "1",
          "push": [ ],
          "pc": "790"
        },
        {
          "npc": "795",
          "push": [ ],
          "pc": "791"
        },
        {
          "npc": "796",
          "readonly": "0",
          "push": [ ],
          "pc": "795"
        },
        {
          "npc": "797",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "796"
        },
        {
          "npc": "798",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "797"
        },
        {
          "npc": "799",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "798"
        },
        {
          "shared": { "alloc": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "next" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "pool" }, "value": { "type": "dict", "value": [] } } ] }, "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "npops": { "type": "int", "value": "1" }, "npushes": { "type": "int", "value": "1" }, "nswaps": { "type": "int", "value": "1" }, "s": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "lock" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "top" }, "value": { "type": "address", "value": [] } } ] }, "stack": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "800",
          "pop": "2",
          "push": [ ],
          "pc": "799"
        },
        {
          "npc": "801",
          "atomic": "0",
          "push": [ ],
          "pc": "800"
        },
        {
          "npc": "1193",
          "fp": "9",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1193",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "pop": "5",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "801"
        },
        {
          "npc": "1194",
          "pop": "1",
          "push": [ ],
          "pc": "1193"
        },
        {
          "npc": "1195",
          "push": [ { "type": "pc", "value": "1139" } ],
          "pc": "1194"
        },
        {
          "npc": "1196",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1195"
        },
        {
          "npc": "1139",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1197" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1196"
        },
        {
          "npc": "1140",
          "fp": "14",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1140",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            }
          ],
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }, { "type": "int", "value": "9" } ],
          "pc": "1139"
        },
        {
          "npc": "1141",
          "local": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "push": [ ],
          "pc": "1140"
        },
        {
          "npc": "1142",
          "push": [ { "type": "pc", "value": "784" } ],
          "pc": "1141"
        },
        {
          "npc": "1143",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1142"
        },
        {
          "npc": "1144",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1143"
        },
        {
          "npc": "1145",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1144"
        },
        {
          "npc": "784",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1146" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1145"
        },
        {
          "npc": "785",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "785",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }, { "type": "int", "value": "14" } ],
          "pc": "784"
        },
        {
          "npc": "786",
          "atomic": "1",
          "push": [ ],
          "pc": "785"
        },
        {
          "npc": "787",
          "readonly": "1",
          "push": [ ],
          "pc": "786"
        },
        {
          "npc": "788",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "787"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3bd37",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "1298",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3d1d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "80",
      "tid": "1",
      "xhash": "1572ad3bd37",
      "name": "pop_test(1)",
      "microsteps": [
        {
          "npc": "1299",
          "fp": "4",
          "trace": [
            {
              "pc": "1299",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1298"
        },
        {
          "npc": "1300",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1299"
        },
        {
          "npc": "1301",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1300"
        },
        {
          "npc": "1302",
          "push": [ { "type": "atom", "value": "call pop" } ],
          "pc": "1301"
        },
        {
          "npc": "1303",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call pop" } } ] } ],
          "pc": "1302"
        },
        {
          "npc": "1304",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1303"
        },
        {
          "npc": "1305",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1304"
        },
        {
          "npc": "1306",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call pop" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1305"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3c247",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "1306",
          "fp": "4",
          "trace": [
            {
              "pc": "1306",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3d1d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "176",
      "tid": "1",
      "xhash": "1572ad3c247",
      "name": "pop_test(1)",
      "microsteps": [
        {
          "print": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call pop" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] },
          "npc": "1307",
          "fp": "4",
          "trace": [
            {
              "pc": "1307",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1306"
        },
        {
          "npc": "1308",
          "push": [ { "type": "pc", "value": "1139" } ],
          "pc": "1307"
        },
        {
          "npc": "1309",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1308"
        },
        {
          "npc": "1139",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1310" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1309"
        },
        {
          "npc": "1140",
          "fp": "9",
          "trace": [
            {
              "pc": "1310",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1140",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "4" } ],
          "pc": "1139"
        },
        {
          "npc": "1141",
          "local": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } },
          "push": [ ],
          "pc": "1140"
        },
        {
          "npc": "1142",
          "push": [ { "type": "pc", "value": "784" } ],
          "pc": "1141"
        },
        {
          "npc": "1143",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1142"
        },
        {
          "npc": "1144",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1143"
        },
        {
          "npc": "1145",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1144"
        },
        {
          "npc": "784",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1146" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1145"
        },
        {
          "npc": "785",
          "fp": "14",
          "trace": [
            {
              "pc": "1310",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "785",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] }, { "type": "int", "value": "9" } ],
          "pc": "784"
        },
        {
          "npc": "786",
          "atomic": "1",
          "push": [ ],
          "pc": "785"
        },
        {
          "npc": "787",
          "readonly": "1",
          "push": [ ],
          "pc": "786"
        },
        {
          "npc": "788",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "787"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3c997",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "788",
          "fp": "14",
          "trace": [
            {
              "pc": "1310",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3bc47",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1268",
          "fp": "0",
          "trace": [

          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3d1d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "449",
      "tid": "2",
      "xhash": "1572ad3bc47",
      "name": "push_test(1)",
      "microsteps": [
        {
          "npc": "1269",
          "fp": "4",
          "trace": [
            {
              "pc": "1269",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1268"
        },
        {
          "npc": "1270",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1269"
        },
        {
          "npc": "1271",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1270"
        },
        {
          "npc": "1272",
          "push": [ { "type": "atom", "value": "call push" } ],
          "pc": "1271"
        },
        {
          "npc": "1273",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call push" } } ] } ],
          "pc": "1272"
        },
        {
          "npc": "1274",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1273"
        },
        {
          "npc": "1275",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1274"
        },
        {
          "npc": "1276",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call push" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1275"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3c997",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "788",
          "fp": "14",
          "trace": [
            {
              "pc": "1310",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3c0c7",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "1276",
          "fp": "4",
          "trace": [
            {
              "pc": "1276",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "mode": "runnable",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3d1d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        }
      ]
    },
    {
      "id": "931",
      "tid": "2",
      "xhash": "1572ad3c0c7",
      "name": "push_test(1)",
      "microsteps": [
        {
          "print": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "atom", "value": "call push" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] },
          "npc": "1277",
          "fp": "4",
          "trace": [
            {
              "pc": "1277",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } },
          "push": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "1276"
        },
        {
          "npc": "1278",
          "push": [ { "type": "pc", "value": "1103" } ],
          "pc": "1277"
        },
        {
          "npc": "1279",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1278"
        },
        {
          "npc": "1280",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1279"
        },
        {
          "npc": "1281",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1280"
        },
        {
          "npc": "1282",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } } ] } ],
          "pc": "1281"
        },
        {
          "npc": "1283",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1282"
        },
        {
          "npc": "1284",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1283"
        },
        {
          "npc": "1285",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1284"
        },
        {
          "npc": "1103",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1286" }, { "type": "int", "value": "2" }, { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1285"
        },
        {
          "npc": "1104",
          "fp": "9",
          "trace": [
            {
              "pc": "1286",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1104",
              "xpc": "1103",
              "method": "push(?s, 1)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, "v": { "type": "int", "value": "1" } }
            }
          ],
          "local": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, "v": { "type": "int", "value": "1" } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "4" } ],
          "pc": "1103"
        },
        {
          "npc": "1105",
          "push": [ { "type": "pc", "value": "784" } ],
          "pc": "1104"
        },
        {
          "npc": "1106",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } ],
          "pc": "1105"
        },
        {
          "npc": "1107",
          "push": [ { "type": "atom", "value": "lock" } ],
          "pc": "1106"
        },
        {
          "npc": "1108",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1107"
        },
        {
          "npc": "784",
          "pop": "2",
          "push": [ { "type": "pc", "value": "1109" }, { "type": "int", "value": "2" }, { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "1108"
        },
        {
          "npc": "785",
          "fp": "14",
          "trace": [
            {
              "pc": "1286",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1109",
              "xpc": "1103",
              "method": "push(?s, 1)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, "v": { "type": "int", "value": "1" } }
            },
            {
              "pc": "785",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } },
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "s" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "9" } ],
          "pc": "784"
        },
        {
          "npc": "786",
          "atomic": "1",
          "push": [ ],
          "pc": "785"
        },
        {
          "npc": "787",
          "readonly": "1",
          "push": [ ],
          "pc": "786"
        },
        {
          "npc": "788",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] } ],
          "pc": "787"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "yhash": "1572ad3c547",
          "name": "__init__()",
          "entry": "0",
          "pc": "1403",
          "fp": "0",
          "trace": [

          ],
          "atomic": "1",
          "mode": "terminated",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "1",
          "yhash": "1572ad3c997",
          "name": "pop_test(1)",
          "entry": "1298",
          "pc": "788",
          "fp": "14",
          "trace": [
            {
              "pc": "1310",
              "xpc": "1298",
              "method": "pop_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "2",
          "yhash": "1572ad3cbd7",
          "name": "push_test(1)",
          "entry": "1268",
          "pc": "788",
          "fp": "14",
          "trace": [
            {
              "pc": "1286",
              "xpc": "1268",
              "method": "push_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1109",
              "xpc": "1103",
              "method": "push(?s, 1)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] }, "v": { "type": "int", "value": "1" } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        },
        {
          "tid": "3",
          "yhash": "1572ad3d1d7",
          "name": "swap_test(1)",
          "entry": "1326",
          "pc": "788",
          "fp": "19",
          "trace": [
            {
              "pc": "1338",
              "xpc": "1326",
              "method": "swap_test(1)",
              "calltype": "process",
              "vars": { "result": { "type": "address", "value": [] }, "self": { "type": "int", "value": "1" } }
            },
            {
              "pc": "1197",
              "xpc": "1187",
              "method": "swap(?s)",
              "calltype": "normal",
              "vars": { "result": { "type": "address", "value": [] }, "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "1146",
              "xpc": "1139",
              "method": "pop(?s)",
              "calltype": "normal",
              "vars": { "s": { "type": "address", "value": [{ "type": "atom", "value": "s" } ] } }
            },
            {
              "pc": "788",
              "xpc": "784",
              "method": "acquire(?s[\"lock\"])",
              "calltype": "normal",
              "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "s" }, { "type": "atom", "value": "lock" } ] }, "result": { "type": "address", "value": [] } }
            }
          ],
          "atomic": "1",
          "readonly": "1",
          "mode": "blocked",
          "this": { "type": "dict", "value": [] }
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Push ()",
    "Store stack",
    "Push ()",
    "Store synch",
    "Push ()",
    "Store list",
    "Jump 371",
    "Frame subseq (s, b, e)",
    "DelVar result",
    "Push 0",
    "StoreVar $n9",
    "Push ()",
    "LoadVar b",
    "DelVar b",
    "LoadVar e",
    "DelVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "StoreVar $s12",
    "LoadVar $s12",
    "1-ary IsEmpty",
    "JumpCond True 33",
    "Cut($s12, x)",
    "LoadVar $n9",
    "LoadVar s",
    "LoadVar x",
    "DelVar x",
    "Apply",
    "3-ary DictAdd",
    "IncVar $n9",
    "Jump 21",
    "DelVar $n9",
    "DelVar $s12",
    "DelVar s",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame append (s, e)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push ()",
    "Push 0",
    "LoadVar e",
    "DelVar e",
    "3-ary DictAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame head s",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame tail s",
    "DelVar result",
    "Push PC(8)",
    "Push ()",
    "Push 0",
    "LoadVar s",
    "3-ary DictAdd",
    "Push 1",
    "Push 1",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar s",
    "DelVar s",
    "1-ary len",
    "3-ary DictAdd",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sum a",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "StoreVar $s69",
    "LoadVar $s69",
    "1-ary IsEmpty",
    "JumpCond True 98",
    "Cut($s69, v)",
    "LoadVar result",
    "DelVar result",
    "LoadVar v",
    "DelVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 87",
    "DelVar $s69",
    "Return",
    "Jump 371",
    "Frame set a",
    "DelVar result",
    "Push {}",
    "LoadVar a",
    "DelVar a",
    "StoreVar $s84",
    "LoadVar $s84",
    "1-ary IsEmpty",
    "JumpCond True 115",
    "Cut($s84, v)",
    "LoadVar v",
    "DelVar v",
    "2-ary SetAdd",
    "Jump 107",
    "DelVar $s84",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame list a",
    "DelVar result",
    "Push 0",
    "StoreVar $n97",
    "Push ()",
    "LoadVar a",
    "DelVar a",
    "StoreVar $s100",
    "LoadVar $s100",
    "1-ary IsEmpty",
    "JumpCond True 137",
    "Cut($s100, v)",
    "LoadVar $n97",
    "LoadVar v",
    "DelVar v",
    "3-ary DictAdd",
    "IncVar $n97",
    "Jump 127",
    "DelVar $n97",
    "DelVar $s100",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame values d",
    "DelVar result",
    "Push 0",
    "StoreVar $n115",
    "Push ()",
    "LoadVar d",
    "1-ary keys",
    "StoreVar $s118",
    "LoadVar $s118",
    "1-ary IsEmpty",
    "JumpCond True 162",
    "Cut($s118, k)",
    "LoadVar $n115",
    "LoadVar d",
    "LoadVar k",
    "DelVar k",
    "Apply",
    "3-ary DictAdd",
    "IncVar $n115",
    "Jump 150",
    "DelVar $n115",
    "DelVar $s118",
    "DelVar d",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame items d",
    "DelVar result",
    "Push 0",
    "StoreVar $n136",
    "Push ()",
    "LoadVar d",
    "1-ary keys",
    "StoreVar $s139",
    "LoadVar $s139",
    "1-ary IsEmpty",
    "JumpCond True 194",
    "Cut($s139, k)",
    "LoadVar $n136",
    "Push ()",
    "Push 0",
    "LoadVar k",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar d",
    "LoadVar k",
    "DelVar k",
    "Apply",
    "3-ary DictAdd",
    "3-ary DictAdd",
    "IncVar $n136",
    "Jump 176",
    "DelVar $n136",
    "DelVar $s139",
    "DelVar d",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame enumerate d",
    "DelVar result",
    "Push 0",
    "StoreVar index",
    "Push ()",
    "StoreVar result",
    "LoadVar d",
    "1-ary keys",
    "StoreVar $s167",
    "LoadVar $s167",
    "1-ary IsEmpty",
    "JumpCond True 236",
    "Cut($s167, k)",
    "LoadVar result",
    "DelVar result",
    "Push ()",
    "Push 0",
    "Push ()",
    "Push 0",
    "LoadVar index",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar d",
    "LoadVar k",
    "DelVar k",
    "Apply",
    "3-ary DictAdd",
    "3-ary DictAdd",
    "2-ary +",
    "StoreVar result",
    "LoadVar index",
    "DelVar index",
    "Push 1",
    "2-ary +",
    "StoreVar index",
    "Jump 209",
    "DelVar $s167",
    "DelVar d",
    "DelVar index",
    "Return",
    "Jump 371",
    "Frame qsort a",
    "DelVar result",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 251",
    "DelVar a",
    "Push ()",
    "StoreVar result",
    "Jump 326",
    "Push ()",
    "Push 0",
    "Push PC(52)",
    "LoadVar a",
    "Apply",
    "3-ary DictAdd",
    "Push 1",
    "Push PC(61)",
    "LoadVar a",
    "DelVar a",
    "Apply",
    "3-ary DictAdd",
    "StoreVar (pivot, rest)",
    "Push 0",
    "StoreVar $n216",
    "Push ()",
    "LoadVar rest",
    "StoreVar $s219",
    "DelVar v",
    "LoadVar $s219",
    "1-ary IsEmpty",
    "JumpCond True 284",
    "Cut($s219, v)",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 269",
    "LoadVar $n216",
    "LoadVar v",
    "DelVar v",
    "3-ary DictAdd",
    "IncVar $n216",
    "Jump 269",
    "DelVar $n216",
    "DelVar $s219",
    "StoreVar lower",
    "Push 0",
    "StoreVar $n235",
    "Push ()",
    "LoadVar rest",
    "DelVar rest",
    "StoreVar $s238",
    "DelVar v",
    "LoadVar $s238",
    "1-ary IsEmpty",
    "JumpCond True 308",
    "Cut($s238, v)",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 293",
    "LoadVar $n235",
    "LoadVar v",
    "DelVar v",
    "3-ary DictAdd",
    "IncVar $n235",
    "Jump 293",
    "DelVar $n235",
    "DelVar $s238",
    "StoreVar higher",
    "Push PC(241)",
    "LoadVar lower",
    "DelVar lower",
    "Apply",
    "Push ()",
    "Push 0",
    "LoadVar pivot",
    "DelVar pivot",
    "3-ary DictAdd",
    "Push PC(241)",
    "LoadVar higher",
    "DelVar higher",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sorted d",
    "DelVar result",
    "Push PC(241)",
    "Push PC(119)",
    "LoadVar d",
    "DelVar d",
    "Apply",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame reversed d",
    "DelVar result",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push 0",
    "StoreVar $n281",
    "Push ()",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "StoreVar $s284",
    "LoadVar $s284",
    "1-ary IsEmpty",
    "JumpCond True 365",
    "Cut($s284, i)",
    "LoadVar $n281",
    "LoadVar d",
    "LoadVar n",
    "LoadVar i",
    "DelVar i",
    "2-ary -",
    "Apply",
    "3-ary DictAdd",
    "IncVar $n281",
    "Jump 351",
    "DelVar $n281",
    "DelVar $s284",
    "DelVar d",
    "DelVar n",
    "StoreVar result",
    "Return",
    "Push ()",
    "Store bag",
    "Jump 1042",
    "Frame empty ()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame fromSet s",
    "DelVar result",
    "Push ()",
    "LoadVar s",
    "DelVar s",
    "StoreVar $s313",
    "LoadVar $s313",
    "1-ary IsEmpty",
    "JumpCond True 395",
    "Cut($s313, elt)",
    "LoadVar elt",
    "DelVar elt",
    "Push 1",
    "3-ary DictAdd",
    "Jump 386",
    "DelVar $s313",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame fromList a",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "StoreVar $s329",
    "LoadVar $s329",
    "1-ary IsEmpty",
    "JumpCond True 432",
    "Cut($s329, v)",
    "LoadVar v",
    "LoadVar result",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 425",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 406",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Jump 406",
    "DelVar $s329",
    "Return",
    "Jump 1042",
    "Frame multiplicity (bg, elt)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar elt",
    "LoadVar bg",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 458",
    "LoadVar bg",
    "DelVar bg",
    "LoadVar elt",
    "DelVar elt",
    "Apply",
    "StoreVar result",
    "Jump 462",
    "DelVar bg",
    "DelVar elt",
    "Push 0",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame size bg",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Push 0",
    "StoreVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar $s393",
    "LoadVar $s393",
    "1-ary IsEmpty",
    "JumpCond True 491",
    "Cut($s393, c)",
    "LoadVar result",
    "DelVar result",
    "LoadVar c",
    "DelVar c",
    "2-ary +",
    "StoreVar result",
    "Jump 480",
    "DelVar $s393",
    "Return",
    "Jump 1042",
    "Frame bmin bg",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary min",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame bmax bg",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary max",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame bchoose bg",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame add (bg, elt)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 568",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 574",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Return",
    "Jump 1042",
    "Frame remove (bg, elt)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push 0",
    "LoadVar bg",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 601",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary >",
    "Jump 602",
    "Push False",
    "JumpCond False 611",
    "Push ?result",
    "LoadVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary -",
    "StoreVar [result]",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 622",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "DelVar [result]",
    "DelVar elt",
    "Return",
    "Jump 1042",
    "Frame combinations (bg, k)",
    "DelVar result",
    "LoadVar k",
    "Push 0",
    "2-ary ==",
    "JumpCond False 640",
    "DelVar bg",
    "DelVar k",
    "Push {}",
    "Push PC(374)",
    "Push ()",
    "Apply",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 725",
    "Push PC(464)",
    "LoadVar bg",
    "Apply",
    "StoreVar n",
    "LoadVar k",
    "LoadVar n",
    "2-ary >",
    "JumpCond False 654",
    "DelVar bg",
    "DelVar k",
    "DelVar n",
    "Push {}",
    "StoreVar result",
    "Jump 725",
    "LoadVar k",
    "LoadVar n",
    "DelVar n",
    "2-ary ==",
    "JumpCond False 666",
    "DelVar k",
    "Push {}",
    "LoadVar bg",
    "DelVar bg",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 725",
    "Push PC(494)",
    "LoadVar bg",
    "Apply",
    "StoreVar hd",
    "Push PC(576)",
    "Push ()",
    "Push 0",
    "LoadVar bg",
    "DelVar bg",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar hd",
    "3-ary DictAdd",
    "Apply",
    "StoreVar tl",
    "Push {}",
    "Push PC(625)",
    "Push ()",
    "Push 0",
    "LoadVar tl",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar k",
    "Push 1",
    "2-ary -",
    "3-ary DictAdd",
    "Apply",
    "StoreVar $s570",
    "LoadVar $s570",
    "1-ary IsEmpty",
    "JumpCond True 710",
    "Cut($s570, x)",
    "Push PC(539)",
    "Push ()",
    "Push 0",
    "LoadVar x",
    "DelVar x",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar hd",
    "3-ary DictAdd",
    "Apply",
    "2-ary SetAdd",
    "Jump 694",
    "DelVar $s570",
    "DelVar hd",
    "Push PC(625)",
    "Push ()",
    "Push 0",
    "LoadVar tl",
    "DelVar tl",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar k",
    "DelVar k",
    "3-ary DictAdd",
    "Apply",
    "2-ary |",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame tas lk",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame cas (p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 756",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame BinSema acquired",
    "DelVar result",
    "LoadVar acquired",
    "DelVar acquired",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame Lock ()",
    "DelVar result",
    "Push PC(761)",
    "Push False",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame acquired binsema",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame acquire binsema",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar binsema",
    "Load",
    "1-ary not",
    "JumpCond False 792",
    "Jump 795",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 785",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame release binsema",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "DelVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame held binsema",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame Condition ()",
    "DelVar result",
    "Push PC(374)",
    "Push ()",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame wait (c, lk)",
    "Push 0",
    "StoreVar cnt",
    "DelVar cnt",
    "Push ()",
    "Save",
    "Continue",
    "StoreVar ((), ctx)",
    "AtomicInc(lazy)",
    "Push PC(435)",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Apply",
    "StoreVar cnt",
    "LoadVar c",
    "Push PC(539)",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Apply",
    "Store",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 890",
    "Push PC(435)",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 891",
    "Push False",
    "JumpCond False 896",
    "DelVar c",
    "DelVar cnt",
    "DelVar ctx",
    "Jump 899",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 871",
    "ReadonlyDec",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame notify c",
    "AtomicInc(lazy)",
    "LoadVar c",
    "Load",
    "Push PC(374)",
    "Push ()",
    "Apply",
    "2-ary !=",
    "JumpCond False 932",
    "LoadVar c",
    "Push PC(576)",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "Push PC(521)",
    "LoadVar c",
    "DelVar c",
    "Load",
    "Apply",
    "3-ary DictAdd",
    "Apply",
    "Store",
    "DelVar c",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame notifyAll c",
    "AtomicInc(lazy)",
    "LoadVar c",
    "DelVar c",
    "Push PC(374)",
    "Push ()",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame Semaphore cnt",
    "DelVar result",
    "LoadVar cnt",
    "DelVar cnt",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame P sema",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 963",
    "Jump 966",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 955",
    "ReadonlyDec",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame V sema",
    "AtomicInc(lazy)",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame Queue ()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 1042",
    "Frame get q",
    "DelVar result",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 1005",
    "Jump 1008",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 996",
    "ReadonlyDec",
    "Push PC(52)",
    "LoadVar q",
    "Load",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "Push PC(61)",
    "LoadVar q",
    "DelVar q",
    "Load",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1042",
    "Frame put (q, item)",
    "AtomicInc(lazy)",
    "LoadVar q",
    "Push PC(39)",
    "Push ()",
    "Push 0",
    "LoadVar q",
    "DelVar q",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar item",
    "DelVar item",
    "3-ary DictAdd",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Push ()",
    "Store alloc",
    "Push ()",
    "Store alloc.pool",
    "Push 0",
    "Store alloc.next",
    "Jump 1263",
    "Frame malloc v",
    "DelVar result",
    "AtomicInc(lazy)",
    "Push ?alloc\"pool\"",
    "Load alloc.next",
    "Address",
    "LoadVar v",
    "DelVar v",
    "Store",
    "Push ?alloc\"pool\"",
    "Load alloc.next",
    "Address",
    "StoreVar result",
    "Load alloc.next",
    "Push 1",
    "2-ary +",
    "Store alloc.next",
    "AtomicDec",
    "Return",
    "Jump 1263",
    "Frame free r",
    "AtomicInc(lazy)",
    "LoadVar r",
    "DelVar r",
    "Del",
    "AtomicDec",
    "Return",
    "Jump 1263",
    "Frame leak_check ()",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Load alloc.pool",
    "Push ()",
    "2-ary ==",
    "Push \"alloc_leak\"",
    "Assert2",
    "AtomicDec",
    "ReadonlyDec",
    "Return",
    "Jump 1263",
    "Frame Stack ()",
    "DelVar result",
    "Push ()",
    "Push \"top\"",
    "Push None",
    "3-ary DictAdd",
    "Push \"lock\"",
    "Push PC(768)",
    "Push ()",
    "Apply",
    "3-ary DictAdd",
    "StoreVar result",
    "Return",
    "Jump 1263",
    "Frame push (s, v)",
    "Push PC(784)",
    "LoadVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "Push PC(1049)",
    "Push ()",
    "Push \"value\"",
    "LoadVar v",
    "DelVar v",
    "3-ary DictAdd",
    "Push \"next\"",
    "LoadVar s",
    "Push \"top\"",
    "Address",
    "Load",
    "3-ary DictAdd",
    "Apply",
    "StoreVar node",
    "LoadVar s",
    "Push \"top\"",
    "Address",
    "LoadVar node",
    "DelVar node",
    "Store",
    "Push PC(803)",
    "LoadVar s",
    "DelVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1263",
    "Frame pop s",
    "DelVar result",
    "Push PC(784)",
    "LoadVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "LoadVar s",
    "Push \"top\"",
    "Address",
    "Load",
    "StoreVar node",
    "LoadVar node",
    "Push None",
    "2-ary ==",
    "JumpCond False 1160",
    "DelVar node",
    "Push None",
    "StoreVar result",
    "Jump 1178",
    "LoadVar node",
    "Push \"value\"",
    "Address",
    "Load",
    "StoreVar result",
    "LoadVar s",
    "Push \"top\"",
    "Address",
    "LoadVar node",
    "Push \"next\"",
    "Address",
    "Load",
    "Store",
    "Push PC(1069)",
    "LoadVar node",
    "DelVar node",
    "Apply",
    "Pop",
    "Push PC(803)",
    "LoadVar s",
    "DelVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1263",
    "Frame swap s",
    "Push PC(784)",
    "LoadVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "Push PC(1139)",
    "LoadVar s",
    "Apply",
    "StoreVar node1",
    "LoadVar node1",
    "Push None",
    "2-ary ==",
    "JumpCond True 1254",
    "Push PC(1139)",
    "LoadVar s",
    "Apply",
    "StoreVar node2",
    "LoadVar node2",
    "Push None",
    "2-ary ==",
    "JumpCond True 1239",
    "Push PC(1103)",
    "Push ()",
    "Push 0",
    "LoadVar s",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar node1",
    "DelVar node1",
    "Push \"value\"",
    "Address",
    "Load",
    "3-ary DictAdd",
    "Apply",
    "Pop",
    "Push PC(1103)",
    "Push ()",
    "Push 0",
    "LoadVar s",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar node2",
    "DelVar node2",
    "Push \"value\"",
    "Address",
    "Load",
    "3-ary DictAdd",
    "Apply",
    "Pop",
    "Jump 1254",
    "DelVar node2",
    "Push PC(1103)",
    "Push ()",
    "Push 0",
    "LoadVar s",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar node1",
    "DelVar node1",
    "Push \"value\"",
    "Address",
    "Load",
    "3-ary DictAdd",
    "Apply",
    "Pop",
    "DelVar node1",
    "Push PC(803)",
    "LoadVar s",
    "DelVar s",
    "Push \"lock\"",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Push PC(1089)",
    "Push ()",
    "Apply",
    "Store s",
    "Jump 1349",
    "Frame push_test self",
    "Push ()",
    "Push 0",
    "Push \"call push\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "3-ary DictAdd",
    "Print",
    "Push PC(1103)",
    "Push ()",
    "Push 0",
    "Push ?s",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "3-ary DictAdd",
    "Apply",
    "Pop",
    "Push ()",
    "Push 0",
    "Push \"done push\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "DelVar self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 1349",
    "Frame pop_test self",
    "Push ()",
    "Push 0",
    "Push \"call pop\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "3-ary DictAdd",
    "Print",
    "Push PC(1139)",
    "Push ?s",
    "Apply",
    "StoreVar v",
    "Push ()",
    "Push 0",
    "Push \"done pop\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "DelVar self",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar v",
    "DelVar v",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Jump 1349",
    "Frame swap_test self",
    "Push ()",
    "Push 0",
    "Push \"call swap\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "3-ary DictAdd",
    "Print",
    "Push PC(1187)",
    "Push ?s",
    "Apply",
    "Pop",
    "Push ()",
    "Push 0",
    "Push \"done swap\"",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar self",
    "DelVar self",
    "3-ary DictAdd",
    "Print",
    "Return",
    "Push { 1, 2 }",
    "Choose",
    "Store npushes",
    "Push { 1 }",
    "Choose",
    "Store npops",
    "Push { 1 }",
    "Choose",
    "Store nswaps",
    "Push 1",
    "Load npushes",
    "2-ary ..",
    "StoreVar $s1185",
    "LoadVar $s1185",
    "1-ary IsEmpty",
    "JumpCond True 1372",
    "Cut($s1185, i)",
    "Push PC(1268)",
    "LoadVar i",
    "DelVar i",
    "Push ()",
    "Spawn",
    "Jump 1362",
    "DelVar $s1185",
    "Push 1",
    "Load npops",
    "2-ary ..",
    "StoreVar $s1198",
    "LoadVar $s1198",
    "1-ary IsEmpty",
    "JumpCond True 1387",
    "Cut($s1198, i)",
    "Push PC(1298)",
    "LoadVar i",
    "DelVar i",
    "Push ()",
    "Spawn",
    "Jump 1377",
    "DelVar $s1198",
    "Push 1",
    "Load nswaps",
    "2-ary ..",
    "StoreVar $s1211",
    "LoadVar $s1211",
    "1-ary IsEmpty",
    "JumpCond True 1402",
    "Cut($s1211, i)",
    "Push PC(1326)",
    "LoadVar i",
    "DelVar i",
    "Push ()",
    "Spawn",
    "Jump 1392",
    "DelVar $s1211",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "push constant ()",
    "pop a value and store it in shared variable stack",
    "push constant ()",
    "pop a value and store it in shared variable synch",
    "push constant ()",
    "pop a value and store it in shared variable list",
    "set program counter to 371",
    "start of method subseq",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in $n9",
    "push constant ()",
    "push the value of b",
    "delete method variable b",
    "push the value of e",
    "delete method variable e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in $s12",
    "push the value of $s12",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 33 if the value is True",
    "remove smallest element from $s12 and assign to x",
    "push the value of $n9",
    "push the value of s",
    "push the value of x",
    "delete method variable x",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n9",
    "set program counter to 21",
    "delete method variable $n9",
    "delete method variable $s12",
    "delete method variable s",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method append",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant ()",
    "push constant 0",
    "push the value of e",
    "delete method variable e",
    "pop 3 values and push the result of applying DictAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method head",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method tail",
    "delete method variable result",
    "push constant PC(8)",
    "push constant ()",
    "push constant 0",
    "push the value of s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of s",
    "delete method variable s",
    "pop 1 value and push the result of applying len",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method sum",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "pop a value and store in $s69",
    "push the value of $s69",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 98 if the value is True",
    "remove smallest element from $s69 and assign to v",
    "push the value of result",
    "delete method variable result",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 87",
    "delete method variable $s69",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method set",
    "delete method variable result",
    "push constant {}",
    "push the value of a",
    "delete method variable a",
    "pop a value and store in $s84",
    "push the value of $s84",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 115 if the value is True",
    "remove smallest element from $s84 and assign to v",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying SetAdd",
    "set program counter to 107",
    "delete method variable $s84",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method list",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in $n97",
    "push constant ()",
    "push the value of a",
    "delete method variable a",
    "pop a value and store in $s100",
    "push the value of $s100",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 137 if the value is True",
    "remove smallest element from $s100 and assign to v",
    "push the value of $n97",
    "push the value of v",
    "delete method variable v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n97",
    "set program counter to 127",
    "delete method variable $n97",
    "delete method variable $s100",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method values",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in $n115",
    "push constant ()",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in $s118",
    "push the value of $s118",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 162 if the value is True",
    "remove smallest element from $s118 and assign to k",
    "push the value of $n115",
    "push the value of d",
    "push the value of k",
    "delete method variable k",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n115",
    "set program counter to 150",
    "delete method variable $n115",
    "delete method variable $s118",
    "delete method variable d",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method items",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in $n136",
    "push constant ()",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in $s139",
    "push the value of $s139",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 194 if the value is True",
    "remove smallest element from $s139 and assign to k",
    "push the value of $n136",
    "push constant ()",
    "push constant 0",
    "push the value of k",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of d",
    "push the value of k",
    "delete method variable k",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n136",
    "set program counter to 176",
    "delete method variable $n136",
    "delete method variable $s139",
    "delete method variable d",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method enumerate",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in index",
    "push constant ()",
    "pop a value and store in result",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in $s167",
    "push the value of $s167",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 236 if the value is True",
    "remove smallest element from $s167 and assign to k",
    "push the value of result",
    "delete method variable result",
    "push constant ()",
    "push constant 0",
    "push constant ()",
    "push constant 0",
    "push the value of index",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of d",
    "push the value of k",
    "delete method variable k",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop 3 values and push the result of applying DictAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "push the value of index",
    "delete method variable index",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store in index",
    "set program counter to 209",
    "delete method variable $s167",
    "delete method variable d",
    "delete method variable index",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method qsort",
    "delete method variable result",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 251 if the value is False",
    "delete method variable a",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 326",
    "push constant ()",
    "push constant 0",
    "push constant PC(52)",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant PC(61)",
    "push the value of a",
    "delete method variable a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in (pivot, rest)",
    "push constant 0",
    "pop a value and store in $n216",
    "push constant ()",
    "push the value of rest",
    "pop a value and store in $s219",
    "delete method variable v",
    "push the value of $s219",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 284 if the value is True",
    "remove smallest element from $s219 and assign to v",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 269 if the value is False",
    "push the value of $n216",
    "push the value of v",
    "delete method variable v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n216",
    "set program counter to 269",
    "delete method variable $n216",
    "delete method variable $s219",
    "pop a value and store in lower",
    "push constant 0",
    "pop a value and store in $n235",
    "push constant ()",
    "push the value of rest",
    "delete method variable rest",
    "pop a value and store in $s238",
    "delete method variable v",
    "push the value of $s238",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 308 if the value is True",
    "remove smallest element from $s238 and assign to v",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 293 if the value is False",
    "push the value of $n235",
    "push the value of v",
    "delete method variable v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n235",
    "set program counter to 293",
    "delete method variable $n235",
    "delete method variable $s238",
    "pop a value and store in higher",
    "push constant PC(241)",
    "push the value of lower",
    "delete method variable lower",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant ()",
    "push constant 0",
    "push the value of pivot",
    "delete method variable pivot",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(241)",
    "push the value of higher",
    "delete method variable higher",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method sorted",
    "delete method variable result",
    "push constant PC(241)",
    "push constant PC(119)",
    "push the value of d",
    "delete method variable d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 371",
    "start of method reversed",
    "delete method variable result",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "push constant 0",
    "pop a value and store in $n281",
    "push constant ()",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in $s284",
    "push the value of $s284",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 365 if the value is True",
    "remove smallest element from $s284 and assign to i",
    "push the value of $n281",
    "push the value of d",
    "push the value of n",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying -",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of $n281",
    "set program counter to 351",
    "delete method variable $n281",
    "delete method variable $s284",
    "delete method variable d",
    "delete method variable n",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant ()",
    "pop a value and store it in shared variable bag",
    "set program counter to 1042",
    "start of method empty",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method fromSet",
    "delete method variable result",
    "push constant ()",
    "push the value of s",
    "delete method variable s",
    "pop a value and store in $s313",
    "push the value of $s313",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 395 if the value is True",
    "remove smallest element from $s313 and assign to elt",
    "push the value of elt",
    "delete method variable elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "set program counter to 386",
    "delete method variable $s313",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method fromList",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "pop a value and store in $s329",
    "push the value of $s329",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 432 if the value is True",
    "remove smallest element from $s329 and assign to v",
    "push the value of v",
    "push the value of result",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 425 if the value is False",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 406",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 406",
    "delete method variable $s329",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method multiplicity",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of elt",
    "push the value of bg",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 458 if the value is False",
    "push the value of bg",
    "delete method variable bg",
    "push the value of elt",
    "delete method variable elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 462",
    "delete method variable bg",
    "delete method variable elt",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method size",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push constant 0",
    "pop a value and store in result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in $s393",
    "push the value of $s393",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 491 if the value is True",
    "remove smallest element from $s393 and assign to c",
    "push the value of result",
    "delete method variable result",
    "push the value of c",
    "delete method variable c",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 480",
    "delete method variable $s393",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method bmin",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying min",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method bmax",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying max",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method bchoose",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method add",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 568 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 574",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method remove",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant 0",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 601 if the value is False",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "set program counter to 602",
    "push constant False",
    "pop a value and jump to 611 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and the address of a method variable and store the value at that address",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 622 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address of a method variable and delete that variable",
    "delete method variable elt",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method combinations",
    "delete method variable result",
    "push the value of k",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 640 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "push constant {}",
    "push constant PC(374)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 725",
    "push constant PC(464)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in n",
    "push the value of k",
    "push the value of n",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 654 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "delete method variable n",
    "push constant {}",
    "pop a value and store in result",
    "set program counter to 725",
    "push the value of k",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 666 if the value is False",
    "delete method variable k",
    "push constant {}",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 725",
    "push constant PC(494)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in hd",
    "push constant PC(576)",
    "push constant ()",
    "push constant 0",
    "push the value of bg",
    "delete method variable bg",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of hd",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in tl",
    "push constant {}",
    "push constant PC(625)",
    "push constant ()",
    "push constant 0",
    "push the value of tl",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of k",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in $s570",
    "push the value of $s570",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 710 if the value is True",
    "remove smallest element from $s570 and assign to x",
    "push constant PC(539)",
    "push constant ()",
    "push constant 0",
    "push the value of x",
    "delete method variable x",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of hd",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "set program counter to 694",
    "delete method variable $s570",
    "delete method variable hd",
    "push constant PC(625)",
    "push constant ()",
    "push constant 0",
    "push the value of tl",
    "delete method variable tl",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of k",
    "delete method variable k",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying |",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method tas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 756 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method BinSema",
    "delete method variable result",
    "push the value of acquired",
    "delete method variable acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method Lock",
    "delete method variable result",
    "push constant PC(761)",
    "push constant False",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method acquired",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method acquire",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 792 if the value is False",
    "set program counter to 795",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 785",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method release",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method held",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method Condition",
    "delete method variable result",
    "push constant PC(374)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method wait",
    "push constant 0",
    "pop a value and store in cnt",
    "delete method variable cnt",
    "push constant ()",
    "pop a value and save context",
    "a no-op, must follow a Stop operation",
    "pop a value and store in ((), ctx)",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(435)",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push the value of c",
    "push constant PC(539)",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 890 if the value is False",
    "push constant PC(435)",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 891",
    "push constant False",
    "pop a value and jump to 896 if the value is False",
    "delete method variable c",
    "delete method variable cnt",
    "delete method variable ctx",
    "set program counter to 899",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 871",
    "decrement readonly counter of context",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method notify",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(374)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 932 if the value is False",
    "push the value of c",
    "push constant PC(576)",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant PC(521)",
    "push the value of c",
    "delete method variable c",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "delete method variable c",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method notifyAll",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "delete method variable c",
    "push constant PC(374)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method Semaphore",
    "delete method variable result",
    "push the value of cnt",
    "delete method variable cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method P",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 963 if the value is False",
    "set program counter to 966",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 955",
    "decrement readonly counter of context",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method V",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method Queue",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method get",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 1005 if the value is False",
    "set program counter to 1008",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 996",
    "decrement readonly counter of context",
    "push constant PC(52)",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push constant PC(61)",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1042",
    "start of method put",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant PC(39)",
    "push constant ()",
    "push constant 0",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of item",
    "delete method variable item",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant ()",
    "pop a value and store it in shared variable alloc",
    "push constant ()",
    "pop a value and store it in shared variable pool",
    "push constant 0",
    "pop a value and store it in shared variable next",
    "set program counter to 1263",
    "start of method malloc",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant ?alloc\"pool\"",
    "push value of shared variable next",
    "combine the top two values on the stack into an address and push the result",
    "push the value of v",
    "delete method variable v",
    "pop a value and an address and store the value at the address",
    "push constant ?alloc\"pool\"",
    "push value of shared variable next",
    "combine the top two values on the stack into an address and push the result",
    "pop a value and store in result",
    "push value of shared variable next",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store it in shared variable next",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method free",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of r",
    "delete method variable r",
    "pop an address and delete the shared variable at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method leak_check",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push value of shared variable pool",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "push constant \"alloc_leak\"",
    "pop a value and a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method Stack",
    "delete method variable result",
    "push constant ()",
    "push constant \"top\"",
    "push constant None",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"lock\"",
    "push constant PC(768)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method push",
    "push constant PC(784)",
    "push the value of s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1049)",
    "push constant ()",
    "push constant \"value\"",
    "push the value of v",
    "delete method variable v",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"next\"",
    "push the value of s",
    "push constant \"top\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in node",
    "push the value of s",
    "push constant \"top\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of node",
    "delete method variable node",
    "pop a value and an address and store the value at the address",
    "push constant PC(803)",
    "push the value of s",
    "delete method variable s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method pop",
    "delete method variable result",
    "push constant PC(784)",
    "push the value of s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of s",
    "push constant \"top\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in node",
    "push the value of node",
    "push constant None",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1160 if the value is False",
    "delete method variable node",
    "push constant None",
    "pop a value and store in result",
    "set program counter to 1178",
    "push the value of node",
    "push constant \"value\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of s",
    "push constant \"top\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of node",
    "push constant \"next\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and an address and store the value at the address",
    "push constant PC(1069)",
    "push the value of node",
    "delete method variable node",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(803)",
    "push the value of s",
    "delete method variable s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "set program counter to 1263",
    "start of method swap",
    "push constant PC(784)",
    "push the value of s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1139)",
    "push the value of s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in node1",
    "push the value of node1",
    "push constant None",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1254 if the value is True",
    "push constant PC(1139)",
    "push the value of s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in node2",
    "push the value of node2",
    "push constant None",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1239 if the value is True",
    "push constant PC(1103)",
    "push constant ()",
    "push constant 0",
    "push the value of s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of node1",
    "delete method variable node1",
    "push constant \"value\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1103)",
    "push constant ()",
    "push constant 0",
    "push the value of s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of node2",
    "delete method variable node2",
    "push constant \"value\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 1254",
    "delete method variable node2",
    "push constant PC(1103)",
    "push constant ()",
    "push constant 0",
    "push the value of s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of node1",
    "delete method variable node1",
    "push constant \"value\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "delete method variable node1",
    "push constant PC(803)",
    "push the value of s",
    "delete method variable s",
    "push constant \"lock\"",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "push constant PC(1089)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable s",
    "set program counter to 1349",
    "start of method push_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call push\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "push constant PC(1103)",
    "push constant ()",
    "push constant 0",
    "push constant ?s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ()",
    "push constant 0",
    "push constant \"done push\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "delete method variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 1349",
    "start of method pop_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call pop\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "push constant PC(1139)",
    "push constant ?s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in v",
    "push constant ()",
    "push constant 0",
    "push constant \"done pop\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "delete method variable self",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of v",
    "delete method variable v",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "set program counter to 1349",
    "start of method swap_test",
    "push constant ()",
    "push constant 0",
    "push constant \"call swap\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "push constant PC(1187)",
    "push constant ?s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ()",
    "push constant 0",
    "push constant \"done swap\"",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of self",
    "delete method variable self",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and add to print history",
    "restore caller method state and push result",
    "push constant { 1, 2 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable npushes",
    "push constant { 1 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable npops",
    "push constant { 1 }",
    "pop a set value and push one of its elements",
    "pop a value and store it in shared variable nswaps",
    "push constant 1",
    "push value of shared variable npushes",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in $s1185",
    "push the value of $s1185",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 1372 if the value is True",
    "remove smallest element from $s1185 and assign to i",
    "push constant PC(1268)",
    "push the value of i",
    "delete method variable i",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1362",
    "delete method variable $s1185",
    "push constant 1",
    "push value of shared variable npops",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in $s1198",
    "push the value of $s1198",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 1387 if the value is True",
    "remove smallest element from $s1198 and assign to i",
    "push constant PC(1298)",
    "push the value of i",
    "delete method variable i",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1377",
    "delete method variable $s1198",
    "push constant 1",
    "push value of shared variable nswaps",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in $s1211",
    "push the value of $s1211",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 1402 if the value is True",
    "remove smallest element from $s1211 and assign to i",
    "push constant PC(1326)",
    "push the value of i",
    "delete method variable i",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 1392",
    "delete method variable $s1211",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "398": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "7", "code": "def fromList(a):" },
    "1114": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "813": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "115": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1321": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "209": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "193": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "895": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "72": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "1032": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "829": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "143": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "307": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "263": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1389": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "845": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "590": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1401": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "43": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1159": { "file": "stackimpl.hny", "line": "17", "code": "            result = None" },
    "1148": { "file": "stackimpl.hny", "line": "15", "code": "    let node = s->top:" },
    "879": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "835": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "38", "code": "def wait(c, lk):" },
    "50": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "993": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "66", "code": "    result = []" },
    "540": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "665": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "259": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "705": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1136": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "889": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "943": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "530": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "188": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "942": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "454": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "357": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1373": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "755": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "650": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "1336": { "file": "stacktest.hny", "line": "21", "code": "    stack.swap(?s)" },
    "1303": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "932": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "354": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "338": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "59", "code": "def reversed(d):" },
    "1310": { "file": "stacktest.hny", "line": "16", "code": "    let v = stack.pop(?s):" },
    "933": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "600": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1125": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "878": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "418": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "348": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "304": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "992": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "66", "code": "    result = []" },
    "1362": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "888": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "404": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "1158": { "file": "stackimpl.hny", "line": "17", "code": "            result = None" },
    "1261": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "1235": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "62": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "419": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "1124": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "914": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "828": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "42": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "754": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "1372": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "403": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "1031": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "128": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "114": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1311": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "453": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "1201": { "file": "stackimpl.hny", "line": "27", "code": "    if not (node1 == None):" },
    "566": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "178": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1320": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "931": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1023": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "73", "code": "def put(q, item):" },
    "591": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "564": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "704": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "915": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "1213": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "768": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "18", "code": "def Lock():" },
    "707": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "208": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "1337": { "file": "stacktest.hny", "line": "21", "code": "    stack.swap(?s)" },
    "1223": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "565": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "531": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "1302": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "757": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "1388": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "1271": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "258": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1013": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "70", "code": "        result = list.head(!q)" },
    "541": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "1402": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "452": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "1370": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "847": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1137": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "897": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1220": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "509": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "1174": { "file": "stackimpl.hny", "line": "21", "code": "            free(node)" },
    "811": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "559": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "1363": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "837": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "39", "code": "    var cnt = 0" },
    "1003": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "834": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "38", "code": "def wait(c, lk):" },
    "1203": { "file": "stackimpl.hny", "line": "28", "code": "        var node2 = pop(s)" },
    "1234": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "51": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "8", "code": "def head(s):" },
    "1273": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "1104": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "894": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "12": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1073": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "14", "code": "            del !r" },
    "1211": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "1030": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "567": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "1260": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "844": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1210": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "830": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "568": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "1300": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "56": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "1400": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1360": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "896": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "840": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "40", "code": "    let (), ctx = save():" },
    "890": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1334": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "1270": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "1313": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1130": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "1198": { "file": "stackimpl.hny", "line": "27", "code": "    if not (node1 == None):" },
    "1200": { "file": "stackimpl.hny", "line": "27", "code": "    if not (node1 == None):" },
    "1323": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1237": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "846": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "812": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "1164": { "file": "stackimpl.hny", "line": "19", "code": "            result = node->value" },
    "836": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "39", "code": "    var cnt = 0" },
    "1343": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "709": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "450": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "997": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "71": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "1037": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "1119": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "361": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "9": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "533": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "457": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "1322": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "400": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "8", "code": "    result = []" },
    "1350": { "file": "stacktest.hny", "line": "24", "code": "npushes = choose {1..NPUSH}" },
    "937": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "407": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "947": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "55", "code": "def Semaphore(cnt):" },
    "618": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "1250": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "119": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "25", "code": "def list(a):" },
    "1335": { "file": "stacktest.hny", "line": "21", "code": "    stack.swap(?s)" },
    "1221": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "111": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1108": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "507": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "1404": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1241": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1178": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "1131": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "543": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "759": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "936": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "52", "code": "def notifyAll(c):" },
    "593": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "756": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "1312": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "401": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "8", "code": "    result = []" },
    "990": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "66", "code": "    result = []" },
    "946": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "55", "code": "def Semaphore(cnt):" },
    "41": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "706": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "264": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "532": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "996": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "369": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "366": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "8": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "2", "code": "def subseq(s, b, e):" },
    "604": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "542": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "1199": { "file": "stackimpl.hny", "line": "27", "code": "    if not (node1 == None):" },
    "1129": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "654": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "63", "code": "            elif k == n:" },
    "451": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "266": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "592": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "557": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "1236": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "61": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "11", "code": "def tail(s):" },
    "606": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "13": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "558": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "607": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "656": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "63", "code": "            elif k == n:" },
    "1036": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "508": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "657": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "63", "code": "            elif k == n:" },
    "1240": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "930": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "267": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1353": { "file": "stacktest.hny", "line": "25", "code": "npops = choose {1..NPOP}" },
    "940": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "1392": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "998": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "602": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1088": { "file": "stackimpl.hny", "line": "4", "code": "def Stack():" },
    "402": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "8", "code": "    result = []" },
    "1179": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "1251": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "265": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "384": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "229": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "991": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "66", "code": "    result = []" },
    "938": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "163": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1168": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "363": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "941": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "374": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "1", "code": "def empty():" },
    "1132": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "948": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "56", "code": "    result = cnt" },
    "1352": { "file": "stacktest.hny", "line": "25", "code": "npops = choose {1..NPOP}" },
    "1149": { "file": "stackimpl.hny", "line": "15", "code": "    let node = s->top:" },
    "261": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "959": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "405": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "324": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "112": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "974": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "1239": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "702": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "601": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "506": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "327": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "55", "code": "def sorted(d):" },
    "909": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "455": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "52": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "8", "code": "def head(s):" },
    "924": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "819": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "32", "code": "def held(binsema):" },
    "818": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "32", "code": "def held(binsema):" },
    "752": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "651": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "63": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "619": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "360": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "73": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "11": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1035": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "556": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "377": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "2", "code": "    result = []" },
    "40": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1109": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "701": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "158": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "53": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "1403": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "387": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "228": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "262": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "10": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "925": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "278": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "703": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "555": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "110": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "653": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "1291": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "288": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "751": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "505": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "70": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "984": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "116": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "603": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "318": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1118": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "375": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "2", "code": "    result = []" },
    "362": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "289": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1133": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "406": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "798": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "1393": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "279": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "753": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "695": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1128": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "1089": { "file": "stackimpl.hny", "line": "4", "code": "def Stack():" },
    "748": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "456": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "325": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1169": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "975": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "645": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "61", "code": "            if k > n:" },
    "750": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "12", "code": "        if result:" },
    "60": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "11", "code": "def tail(s):" },
    "1342": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "385": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "260": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "652": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "108": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "985": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "635": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "117": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "700": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "504": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "961": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "681": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "343": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "60", "code": "    let n = len(d):" },
    "554": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "711": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "976": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "62", "code": "def V(sema):" },
    "694": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1238": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "777": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "762": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "16", "code": "    result = acquired" },
    "194": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "67": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "462": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "20", "code": "        result = 0" },
    "20": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1138": { "file": "stackimpl.hny", "line": "13", "code": "def pop(s):" },
    "1112": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "1277": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "1025": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "1346": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "738": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "547": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "1379": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "822": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "814": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "286": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1229": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "376": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "2", "code": "    result = []" },
    "634": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "268": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1034": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "511": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "32", "code": "def bmax(bg):" },
    "109": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "227": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "126": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1077": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "17", "code": "def leak_check():" },
    "226": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "579": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "1255": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "1364": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "235": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "1309": { "file": "stacktest.hny", "line": "16", "code": "    let v = stack.pop(?s):" },
    "621": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "287": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "449": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "463": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "22", "code": "def size(bg):" },
    "1051": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "5", "code": "    atomically:" },
    "1007": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "475": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "24", "code": "    result = 0" },
    "295": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "134": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "447": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "1356": { "file": "stacktest.hny", "line": "26", "code": "nswaps = choose {1..NSWAP}" },
    "697": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "476": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "24", "code": "    result = 0" },
    "292": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "371": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "680": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "30": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "201": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "38", "code": "    var index = 0" },
    "1207": { "file": "stackimpl.hny", "line": "29", "code": "        if not (node2 == None):" },
    "1015": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "763": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "16", "code": "    result = acquired" },
    "1245": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1194": { "file": "stackimpl.hny", "line": "26", "code": "    var node1 = pop(s)" },
    "962": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "1390": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "1156": { "file": "stackimpl.hny", "line": "17", "code": "            result = None" },
    "1098": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "186": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "608": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "7": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "2", "code": "def subseq(s, b, e):" },
    "1100": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "342": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "60", "code": "    let n = len(d):" },
    "620": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "866": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "1160": { "file": "stackimpl.hny", "line": "19", "code": "            result = node->value" },
    "1041": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "340": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "60", "code": "    let n = len(d):" },
    "127": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1369": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "881": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "180": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1374": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "860": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "609": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "1304": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "1067": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "224": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1146": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "882": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "187": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1293": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "232": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "833": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "195": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "908": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "200": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "37", "code": "def enumerate(d):" },
    "113": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "821": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "815": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "1170": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "120": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1267": { "file": "stacktest.hny", "line": "9", "code": "def push_test(self):" },
    "233": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "1122": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "893": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "867": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "44", "code": "            !lk = False" },
    "1219": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "949": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "56", "code": "    result = cnt" },
    "935": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "52", "code": "def notifyAll(c):" },
    "775": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "21", "code": "def acquired(binsema):" },
    "655": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "63", "code": "            elif k == n:" },
    "464": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "22", "code": "def size(bg):" },
    "1189": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "627": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "57", "code": "    if k == 0:" },
    "865": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "293": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "713": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "370": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1217": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "1005": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "545": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "687": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "963": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "368": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "211": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "513": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "1093": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "446": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "85": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "1319": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "135": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1209": { "file": "stackimpl.hny", "line": "29", "code": "        if not (node2 == None):" },
    "1017": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "1243": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1172": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "1110": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "823": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "1048": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "4", "code": "def malloc(v):" },
    "1102": { "file": "stackimpl.hny", "line": "7", "code": "def push(s, v):" },
    "779": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "1340": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "478": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "181": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "234": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "883": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1332": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "995": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "68", "code": "def get(q):" },
    "341": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "60", "code": "    let n = len(d):" },
    "47": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1144": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "548": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "510": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "30", "code": "    result = min(keys(bg))" },
    "269": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "710": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "17": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1027": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "864": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "1329": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "624": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "56", "code": "def combinations(bg, k):" },
    "960": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "774": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "686": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1227": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "1053": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "546": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "544": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "139": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "77": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "346": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "237": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "808": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "966": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "708": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "626": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "57", "code": "    if k == 0:" },
    "294": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1396": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1154": { "file": "stackimpl.hny", "line": "16", "code": "        if node == None:" },
    "479": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "460": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "20", "code": "        result = 0" },
    "22": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1231": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "297": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "296": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "994": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "68", "code": "def get(q):" },
    "776": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "21", "code": "def acquired(binsema):" },
    "359": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1162": { "file": "stackimpl.hny", "line": "19", "code": "            result = node->value" },
    "1043": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "967": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "445": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "712": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "236": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "569": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "934": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "684": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "461": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "20", "code": "        result = 0" },
    "32": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1253": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "809": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "512": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "32", "code": "def bmax(bg):" },
    "199": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "37", "code": "def enumerate(d):" },
    "576": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "47", "code": "def remove(bg, elt):" },
    "122": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "904": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "831": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "1106": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "1063": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "979": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "898": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1047": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "2", "code": "next = 0" },
    "466": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "1196": { "file": "stackimpl.hny", "line": "26", "code": "    var node1 = pop(s)" },
    "350": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "15": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "137": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1306": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "1263": { "file": "stacktest.hny", "line": "7", "code": "s = stack.Stack()" },
    "699": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "205": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "39", "code": "    result = []" },
    "838": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "40", "code": "    let (), ctx = save():" },
    "910": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "715": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "817": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "471": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "103": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "39": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "5", "code": "def append(s, e):" },
    "197": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "218": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1091": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "639": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "1011": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "70", "code": "        result = list.head(!q)" },
    "1120": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "810": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "805": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "562": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "291": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "29": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1349": { "file": "stacktest.hny", "line": "24", "code": "npushes = choose {1..NPUSH}" },
    "182": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1376": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "82": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "16", "code": "    result = 0" },
    "353": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1295": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "918": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "891": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1324": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1247": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "190": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "766": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "16", "code": "    result = acquired" },
    "231": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "458": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "20", "code": "        result = 0" },
    "378": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "2", "code": "    result = []" },
    "121": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "92": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "465": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "290": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "832": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "130": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1085": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "804": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "1314": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "905": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "803": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "28", "code": "def release(binsema):" },
    "772": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "770": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "682": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "230": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "892": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "549": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "638": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "623": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "196": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "57": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "1359": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "816": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "30", "code": "    atomically !binsema = False" },
    "622": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "1057": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "773": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "698": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1134": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "219": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "761": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "15", "code": "def BinSema(acquired):" },
    "477": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "683": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "136": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1330": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "1289": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "1038": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "459": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "20", "code": "        result = 0" },
    "802": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "28", "code": "def release(binsema):" },
    "1150": { "file": "stackimpl.hny", "line": "15", "code": "    let node = s->top:" },
    "352": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1225": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "912": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "129": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "560": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "718": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "688": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "131": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "1166": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "578": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "574": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "99": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "1233": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "760": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "15", "code": "def BinSema(acquired):" },
    "448": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "1182": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "207": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "769": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "355": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1257": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "191": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1366": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "1126": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "1190": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "771": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "202": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "38", "code": "    var index = 0" },
    "806": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "75": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "1265": { "file": "stacktest.hny", "line": "7", "code": "s = stack.Stack()" },
    "1033": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "917": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "916": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "125": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "203": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "38", "code": "    var index = 0" },
    "467": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "563": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "470": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "1394": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "1354": { "file": "stacktest.hny", "line": "25", "code": "npops = choose {1..NPOP}" },
    "1021": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "189": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "185": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "575": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "47", "code": "def remove(bg, elt):" },
    "628": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "57", "code": "    if k == 0:" },
    "65": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "206": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "1176": { "file": "stackimpl.hny", "line": "21", "code": "            free(node)" },
    "184": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "969": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "913": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "192": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1399": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1344": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "839": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "40", "code": "    let (), ctx = save():" },
    "1297": { "file": "stacktest.hny", "line": "14", "code": "def pop_test(self):" },
    "765": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "16", "code": "    result = acquired" },
    "577": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "689": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "349": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "561": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "132": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "55": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "1061": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "7", "code": "        result = ?pool[next]" },
    "899": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "807": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "29", "code": "    assert !binsema" },
    "1140": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "767": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "18", "code": "def Lock():" },
    "1215": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "474": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "801": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "629": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "57", "code": "    if k == 0:" },
    "356": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1316": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1275": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "472": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "45": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "351": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1071": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "14", "code": "            del !r" },
    "1326": { "file": "stacktest.hny", "line": "19", "code": "def swap_test(self):" },
    "1001": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "204": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "39", "code": "    result = []" },
    "1116": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "800": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "124": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "968": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "473": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "133": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "764": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "16", "code": "    result = acquired" },
    "89": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "1097": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "1205": { "file": "stackimpl.hny", "line": "28", "code": "        var node2 = pop(s)" },
    "911": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "49", "code": "    atomically if !c != bag.empty():" },
    "150": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "214": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1044": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "1", "code": "pool = []" },
    "1191": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "18": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1287": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "1087": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "441": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "1395": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "522": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "518": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "100": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "21", "code": "def set(a):" },
    "790": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "69": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "431": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "1096": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "900": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "740": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "9", "code": "def cas(p, old, new):" },
    "617": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "53", "code": "        del result[elt]" },
    "743": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "96": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "1180": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "950": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "56", "code": "    result = cnt" },
    "1009": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "70", "code": "        result = list.head(!q)" },
    "733": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "1143": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "1296": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "1248": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1079": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "730": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "6", "code": "        result = !lk" },
    "1018": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "416": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "81": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "16", "code": "    result = 0" },
    "79": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "15", "code": "def sum(a):" },
    "793": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "616": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "430": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "217": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "719": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "25": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1028": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "957": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "1384": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "91": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "583": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "572": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "1258": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "614": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "582": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "169": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "732": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "6", "code": "        result = !lk" },
    "907": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "48", "code": "def notify(c):" },
    "491": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "1192": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "523": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "517": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "906": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "48", "code": "def notify(c):" },
    "490": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "1054": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "716": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1284": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "1080": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "573": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "956": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "440": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "1387": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "164": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "35": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "379": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "4", "code": "def fromSet(s):" },
    "220": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "49": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1142": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "248": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "47", "code": "        result = []" },
    "106": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1153": { "file": "stackimpl.hny", "line": "16", "code": "        if node == None:" },
    "1095": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "669": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1078": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "389": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "298": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "270": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "216": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1187": { "file": "stackimpl.hny", "line": "24", "code": "def swap(s):" },
    "581": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "611": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "329": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "1069": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "11", "code": "def free(r):" },
    "742": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "10", "code": "    atomically:" },
    "78": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "731": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "6", "code": "        result = !lk" },
    "415": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "152": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "964": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "1299": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "792": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "919": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "102": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1081": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "951": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "56", "code": "    result = cnt" },
    "1338": { "file": "stacktest.hny", "line": "21", "code": "    stack.swap(?s)" },
    "714": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "643": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "60", "code": "        let n = size(bg):" },
    "492": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "717": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "395": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "692": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "433": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "901": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "571": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "633": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "442": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "345": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "642": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "60", "code": "        let n = size(bg):" },
    "443": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "156": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "432": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "316": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "312": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "68": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "632": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "493": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "28", "code": "def bmin(bg):" },
    "280": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "693": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "238": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "521": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "35", "code": "def bchoose(bg):" },
    "978": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "173": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "107": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1298": { "file": "stacktest.hny", "line": "14", "code": "def pop_test(self):" },
    "1008": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "80": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "15", "code": "def sum(a):" },
    "610": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "988": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "65", "code": "def Queue():" },
    "580": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "157": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "123": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "151": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1259": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "1068": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "11", "code": "def free(r):" },
    "668": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "902": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "570": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "335": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "249": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "47", "code": "        result = []" },
    "215": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1193": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "928": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "183": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "520": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "35", "code": "def bchoose(bg):" },
    "1055": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "311": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "239": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "42", "code": "        index += 1" },
    "213": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1285": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "417": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "434": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "15", "code": "def multiplicity(bg, elt):" },
    "281": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "394": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "347": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "313": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "308": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "791": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "1386": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "952": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "56", "code": "    result = cnt" },
    "1029": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "444": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "271": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "34": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1249": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "358": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "344": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "337": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "1019": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "741": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "10", "code": "    atomically:" },
    "953": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "58", "code": "def P(sema):" },
    "101": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "21", "code": "def set(a):" },
    "24": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1152": { "file": "stackimpl.hny", "line": "16", "code": "        if node == None:" },
    "1094": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "19": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "334": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "221": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "90": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "903": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "46", "code": "            !lk = True" },
    "1186": { "file": "stackimpl.hny", "line": "24", "code": "def swap(s):" },
    "165": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "397": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "310": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "212": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "48": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1045": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "1", "code": "pool = []" },
    "876": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "138": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "613": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "1269": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "794": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "1282": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "272": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1082": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "826": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "35", "code": "def Condition():" },
    "1339": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "982": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "413": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "10", "code": "        if v in keys(result):" },
    "282": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1058": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "7", "code": "        result = ?pool[next]" },
    "734": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "322": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "166": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "148": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "27": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "886": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1278": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "1049": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "4", "code": "def malloc(v):" },
    "744": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "690": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "222": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "198": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "965": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "1185": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "728": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "5", "code": "    atomically:" },
    "685": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "382": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "84": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "1004": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "210": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "40", "code": "    for k in keys d:" },
    "862": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "675": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "514": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "299": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1074": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "14", "code": "            del !r" },
    "372": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "515": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "551": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "41", "code": "    result = bg" },
    "95": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "1208": { "file": "stackimpl.hny", "line": "29", "code": "        if not (node2 == None):" },
    "788": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "625": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "56", "code": "def combinations(bg, k):" },
    "37": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1065": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "778": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "737": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "827": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "35", "code": "def Condition():" },
    "26": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "285": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "223": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "1279": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "795": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "747": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "323": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1163": { "file": "stackimpl.hny", "line": "19", "code": "            result = node->value" },
    "877": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "501": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "414": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "10", "code": "        if v in keys(result):" },
    "273": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "797": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "412": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "10", "code": "        if v in keys(result):" },
    "981": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "373": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "1", "code": "def empty():" },
    "1381": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "105": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "283": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1075": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "14", "code": "            del !r" },
    "983": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "971": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "383": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "155": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1103": { "file": "stackimpl.hny", "line": "7", "code": "def push(s, v):" },
    "973": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "921": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1283": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "869": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "44", "code": "            !lk = False" },
    "154": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "923": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "640": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "60", "code": "        let n = size(bg):" },
    "550": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "41", "code": "    result = bg" },
    "516": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "94": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "104": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "1064": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "631": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "630": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "57", "code": "    if k == 0:" },
    "1083": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "500": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "972": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "380": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "4", "code": "def fromSet(s):" },
    "225": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "41", "code": "        result += [ (index, d[k]), ]" },
    "735": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "641": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "60", "code": "        let n = size(bg):" },
    "59": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "868": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "44", "code": "            !lk = False" },
    "1173": { "file": "stackimpl.hny", "line": "21", "code": "            free(node)" },
    "922": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "691": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "275": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1268": { "file": "stacktest.hny", "line": "9", "code": "def push_test(self):" },
    "1059": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "7", "code": "        result = ?pool[next]" },
    "745": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "502": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "970": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "60", "code": "        !sema -= 1" },
    "696": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1218": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "820": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "284": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1184": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "980": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "884": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "552": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "41", "code": "    result = bg" },
    "97": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "870": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "44", "code": "            !lk = False" },
    "86": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "1014": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "746": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "11", "code": "        result = !p == old" },
    "636": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "880": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "36": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "646": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "61", "code": "            if k > n:" },
    "469": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "736": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "7", "code": "        !lk = True" },
    "274": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "861": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "796": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "887": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "637": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "58", "code": "        result = { empty() }" },
    "411": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "10", "code": "        if v in keys(result):" },
    "1380": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "1113": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "920": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "647": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "61", "code": "            if k > n:" },
    "519": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "33", "code": "    result = max(keys(bg))" },
    "1228": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "553": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "927": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "885": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1280": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "87": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "977": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "62", "code": "def V(sema):" },
    "875": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "863": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "825": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "410": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "10", "code": "        if v in keys(result):" },
    "503": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "1383": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "31": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "799": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "26", "code": "        !binsema = True" },
    "21": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1099": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "874": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "749": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "12", "code": "        if result:" },
    "824": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "33", "code": "    result = !binsema" },
    "739": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "9", "code": "def cas(p, old, new):" },
    "1024": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "73", "code": "def put(q, item):" },
    "468": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "1290": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "386": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "926": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "644": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "61", "code": "            if k > n:" },
    "485": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "727": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "4", "code": "def tas(lk):" },
    "1368": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "393": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "1101": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "1060": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "7", "code": "        result = ?pool[next]" },
    "597": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "326": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "662": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "159": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "787": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "250": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "47", "code": "        result = []" },
    "1357": { "file": "stacktest.hny", "line": "26", "code": "nswaps = choose {1..NSWAP}" },
    "986": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "16": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1305": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "1264": { "file": "stacktest.hny", "line": "7", "code": "s = stack.Stack()" },
    "537": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "276": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "529": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "499": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "1123": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "1016": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "1242": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "176": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "658": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "63", "code": "            elif k == n:" },
    "1281": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "784": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "24", "code": "def acquire(binsema):" },
    "589": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "49", "code": "    result = bg" },
    "319": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "663": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "425": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "245": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "46", "code": "    if a == []:" },
    "1042": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "987": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "63", "code": "    atomically !sema += 1" },
    "144": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "671": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "497": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "277": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1375": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "365": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "439": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "1378": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "251": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "390": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "437": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "1382": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "1070": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "12", "code": "    atomically:" },
    "486": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "381": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "670": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "242": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "46", "code": "    if a == []:" },
    "958": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "364": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "330": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "64": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "426": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "332": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "44": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "872": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1052": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "145": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "939": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "843": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "41", "code": "        atomically:" },
    "177": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "161": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "659": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "498": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "392": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "999": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "162": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "871": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "170": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1139": { "file": "stackimpl.hny", "line": "13", "code": "def pop(s):" },
    "333": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "74": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "321": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "243": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "46", "code": "    if a == []:" },
    "496": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "859": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "320": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "391": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "1365": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "595": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "785": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "677": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "605": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "51", "code": "        result[elt] -= 1" },
    "945": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "367": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "436": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "33": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1252": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1121": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "535": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "488": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "538": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "39", "code": "def add(bg, elt):" },
    "244": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "46", "code": "    if a == []:" },
    "66": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "1195": { "file": "stackimpl.hny", "line": "26", "code": "    var node1 = pop(s)" },
    "1351": { "file": "stacktest.hny", "line": "24", "code": "npushes = choose {1..NPUSH}" },
    "331": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "167": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "33", "code": "def items(d):" },
    "76": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "14": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1266": { "file": "stacktest.hny", "line": "7", "code": "s = stack.Stack()" },
    "1026": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "729": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "5", "code": "    atomically:" },
    "160": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1226": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "598": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1161": { "file": "stackimpl.hny", "line": "19", "code": "            result = node->value" },
    "118": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "25", "code": "def list(a):" },
    "1391": { "file": "stacktest.hny", "line": "31", "code": "for i in {1..nswaps}:" },
    "1155": { "file": "stackimpl.hny", "line": "16", "code": "        if node == None:" },
    "873": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "45", "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "23": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "725": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1145": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "1092": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "676": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "724": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "596": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "149": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "534": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "612": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "1171": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "1111": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "674": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "758": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "13", "code": "            !p = new" },
    "428": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "1292": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "726": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "4", "code": "def tas(lk):" },
    "594": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1216": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "1006": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "858": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "489": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "1066": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "396": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "58": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "789": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "786": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "25", "code": "    atomically when not !binsema:" },
    "1325": { "file": "stacktest.hny", "line": "19", "code": "def swap_test(self):" },
    "1206": { "file": "stackimpl.hny", "line": "29", "code": "        if not (node2 == None):" },
    "309": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1084": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "435": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "15", "code": "def multiplicity(bg, elt):" },
    "429": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "1188": { "file": "stackimpl.hny", "line": "25", "code": "    acquire(?s->lock)" },
    "1276": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "247": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "47", "code": "        result = []" },
    "246": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "46", "code": "    if a == []:" },
    "46": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "6", "code": "    result = s + [e,]" },
    "1341": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "944": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "53", "code": "    atomically !c = bag.empty()" },
    "536": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "37", "code": "    result = choose(keys(bg))" },
    "1315": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1076": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "17", "code": "def leak_check():" },
    "495": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "989": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "65", "code": "def Queue():" },
    "1056": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "6", "code": "        pool[next] = v" },
    "848": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "314": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "409": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "783": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "24", "code": "def acquire(binsema):" },
    "526": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "666": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1317": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1272": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "841": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "40", "code": "    let (), ctx = save():" },
    "649": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "1072": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "14", "code": "            del !r" },
    "494": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "28", "code": "def bmin(bg):" },
    "1288": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "1039": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "1333": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "1117": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "1020": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "147": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1328": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "586": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "1361": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "855": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "300": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "336": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "303": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "93": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "1183": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "929": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "50", "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1256": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "1002": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "140": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "241": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "45", "code": "def qsort(a):" },
    "172": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "954": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "58", "code": "def P(sema):" },
    "481": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "153": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "782": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "525": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "240": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "45", "code": "def qsort(a):" },
    "1246": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1202": { "file": "stackimpl.hny", "line": "28", "code": "        var node2 = pop(s)" },
    "317": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1127": { "file": "stackimpl.hny", "line": "10", "code": "        s->top = node" },
    "1397": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1355": { "file": "stacktest.hny", "line": "26", "code": "nswaps = choose {1..NSWAP}" },
    "408": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "9", "code": "    for v in a:" },
    "1262": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "1230": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "388": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "315": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1165": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "853": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "780": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "722": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "171": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1327": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "842": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "40", "code": "    let (), ctx = save():" },
    "615": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "52", "code": "    if result[elt] <= 0:" },
    "1046": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "2", "code": "next = 0" },
    "539": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "39", "code": "def add(bg, elt):" },
    "28": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1371": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "1151": { "file": "stackimpl.hny", "line": "15", "code": "    let node = s->top:" },
    "955": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "59", "code": "    atomically when !sema > 0:" },
    "1141": { "file": "stackimpl.hny", "line": "14", "code": "    acquire(?s->lock)" },
    "720": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "672": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "168": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "33", "code": "def items(d):" },
    "1294": { "file": "stacktest.hny", "line": "12", "code": "    print(\"done push\", self)" },
    "1214": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "854": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "599": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "50", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "1175": { "file": "stackimpl.hny", "line": "21", "code": "            free(node)" },
    "83": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "16", "code": "    result = 0" },
    "1224": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "487": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "1345": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "1105": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "1318": { "file": "stacktest.hny", "line": "17", "code": "        print(\"done pop\", self, v)" },
    "1010": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "70", "code": "        result = list.head(!q)" },
    "1197": { "file": "stackimpl.hny", "line": "26", "code": "    var node1 = pop(s)" },
    "723": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "673": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "648": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "62", "code": "                result = {}" },
    "146": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "1301": { "file": "stacktest.hny", "line": "15", "code": "    print(\"call pop\", self)" },
    "1062": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "8", "code": "        next += 1" },
    "427": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "13", "code": "            result[v] = 1" },
    "328": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "55", "code": "def sorted(d):" },
    "305": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "88": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "17", "code": "    for v in a:" },
    "1012": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "70", "code": "        result = list.head(!q)" },
    "1000": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "69", "code": "    atomically when !q != []:" },
    "141": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "29", "code": "def values(d):" },
    "588": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "49", "code": "    result = bg" },
    "524": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "1377": { "file": "stacktest.hny", "line": "29", "code": "for i in {1..npops}:" },
    "852": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "302": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "38": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "5", "code": "def append(s, e):" },
    "660": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "257": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1090": { "file": "stackimpl.hny", "line": "5", "code": "    result = { .top: None, .lock: Lock() }" },
    "1204": { "file": "stackimpl.hny", "line": "28", "code": "        var node2 = pop(s)" },
    "1244": { "file": "stackimpl.hny", "line": "33", "code": "            push(s,node1->value)" },
    "1308": { "file": "stacktest.hny", "line": "16", "code": "    let v = stack.pop(?s):" },
    "584": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "1177": { "file": "stackimpl.hny", "line": "21", "code": "            free(node)" },
    "438": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "1398": { "file": "stacktest.hny", "line": "32", "code": "    spawn swap_test(i)" },
    "1286": { "file": "stacktest.hny", "line": "11", "code": "    stack.push(?s, self)" },
    "480": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "721": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "67", "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "339": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "59", "code": "def reversed(d):" },
    "252": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1115": { "file": "stackimpl.hny", "line": "9", "code": "    let node = malloc({ .value: v, .next: s->top }):" },
    "175": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1147": { "file": "stackimpl.hny", "line": "15", "code": "    let node = s->top:" },
    "585": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "48", "code": "    assert 0 not in bg" },
    "253": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1212": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "678": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1086": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "18", "code": "    assert pool == [], .alloc_leak" },
    "420": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "856": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "781": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "22", "code": "    result = !binsema" },
    "664": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "256": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1274": { "file": "stacktest.hny", "line": "10", "code": "    print(\"call push\", self)" },
    "179": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "54": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "9", "code": "    result = s[0]" },
    "1347": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "1107": { "file": "stackimpl.hny", "line": "8", "code": "    acquire(?s->lock)" },
    "1181": { "file": "stackimpl.hny", "line": "22", "code": "    release(?s->lock)" },
    "587": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "49", "code": "    result = bg" },
    "1331": { "file": "stacktest.hny", "line": "20", "code": "    print(\"call swap\", self)" },
    "1254": { "file": "stackimpl.hny", "line": "34", "code": "    release(?s->lock)" },
    "484": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "26", "code": "        result += c" },
    "851": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "679": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "98": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "18", "code": "        result += v" },
    "174": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "1022": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "71", "code": "        !q = list.tail(!q)" },
    "661": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "64", "code": "                result = { bg }" },
    "142": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "29", "code": "def values(d):" },
    "1307": { "file": "stacktest.hny", "line": "16", "code": "    let v = stack.pop(?s):" },
    "849": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1358": { "file": "stacktest.hny", "line": "27", "code": "for i in {1..npushes}:" },
    "527": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "1050": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\alloc.hny", "line": "5", "code": "    atomically:" },
    "424": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "421": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "667": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "66", "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "399": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "7", "code": "def fromList(a):" },
    "1135": { "file": "stackimpl.hny", "line": "11", "code": "    release(?s->lock)" },
    "1222": { "file": "stackimpl.hny", "line": "30", "code": "            push(s,node1->value)" },
    "857": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "43", "code": "            !c = bag.add(!c, ctx)" },
    "482": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" },
    "301": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "255": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1167": { "file": "stackimpl.hny", "line": "20", "code": "            s->top = node->next" },
    "1040": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "74", "code": "    atomically !q = list.append(!q, item)" },
    "1348": { "file": "stacktest.hny", "line": "22", "code": "    print(\"done swap\", self)" },
    "1157": { "file": "stackimpl.hny", "line": "17", "code": "            result = None" },
    "254": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "423": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "422": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "11", "code": "            result[v] += 1" },
    "1385": { "file": "stacktest.hny", "line": "30", "code": "    spawn pop_test(i)" },
    "1367": { "file": "stacktest.hny", "line": "28", "code": "    spawn push_test(i)" },
    "528": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "36", "code": "    assert 0 not in bg" },
    "306": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "850": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\synch.hny", "line": "42", "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1232": { "file": "stackimpl.hny", "line": "31", "code": "            push(s,node2->value)" },
    "483": { "file": "c:\\programdata\\anaconda3\\lib\\site-packages\\harmony_model_checker\\modules\\bag.hny", "line": "25", "code": "    for c in bg:" }
  }
}
