<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>

#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

        
  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: No issues
      </th>
    </tr>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__ ()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable synch' id='C2'>
              Store synch
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 65' id='C3'>
              Jump 65
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method cas' id='C4'>
              Frame cas (p, old, new)
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C5'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C6'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C7'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C8'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of old' id='C9'>
              LoadVar old
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable old' id='C10'>
              DelVar old
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C11'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C12'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C13'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 20 if the value is False' id='C14'>
              JumpCond False 20
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C15'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C16'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of new' id='C17'>
              LoadVar new
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C18'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C19'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C20'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C21'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C22'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C23'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 65' id='C24'>
              Jump 65
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Lock' id='C25'>
              Frame Lock ()
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C26'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C27'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C28'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C29'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 65' id='C30'>
              Jump 65
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method acquire' id='C31'>
              Frame acquire lk
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(4)' id='C32'>
              Push PC(4)
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C33'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C34'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C35'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C36'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C37'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C38'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C39'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C40'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C41'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C42'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C43'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 46 if the value is True' id='C44'>
              JumpCond True 46
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 32' id='C45'>
              Jump 32
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lk' id='C46'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C47'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 65' id='C48'>
              Jump 65
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method release' id='C49'>
              Frame release lk
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(4)' id='C50'>
              Push PC(4)
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C51'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C52'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C53'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lk' id='C54'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C55'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C56'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C57'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C58'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C59'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C60'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C61'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C62'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C63'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C64'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(25)' id='C65'>
              Push PC(25)
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C66'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C67'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable lock' id='C68'>
              Store lock
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 95' id='C69'>
              Jump 95
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method thread' id='C70'>
              Frame thread ()
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { False, True }' id='C71'>
              Push { False, True }
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C72'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 94 if the value is False' id='C73'>
              JumpCond False 94
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(31)' id='C74'>
              Push PC(31)
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?lock' id='C75'>
              Push ?lock
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C76'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C77'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C78'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C79'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C80'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(78)' id='C81'>
              Push PC(78)
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying countLabel' id='C82'>
              1-ary countLabel
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C83'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C84'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C85'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C86'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C87'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C88'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(49)' id='C89'>
              Push PC(49)
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?lock' id='C90'>
              Push ?lock
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C91'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C92'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 71' id='C93'>
              Jump 71
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C94'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { 1, 2 }' id='C95'>
              Push { 1, 2 }
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in $s86' id='C96'>
              StoreVar $s86
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of $s86' id='C97'>
              LoadVar $s86
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying IsEmpty' id='C98'>
              1-ary IsEmpty
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 107 if the value is True' id='C99'>
              JumpCond True 107
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='remove smallest element from $s86 and assign to i' id='C100'>
              Cut($s86, i)
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C101'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(70)' id='C102'>
              Push PC(70)
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C103'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C104'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C105'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 97' id='C106'>
              Jump 97
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $s86' id='C107'>
              DelVar $s86
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C108'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C109'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
    </td>
  </tr>
</table>
<script>
var nthreads = 0;
var nmegasteps = 0;
var vardir = [
  []
];
var state =
{
  "issue": "No issues",
  "symbols": {

  },
  "nodes": [
    {
      "idx": 0,
      "component": 0,
      "transitions": [
        [[],[2]]
      ],
      "type": "initial"
    },
    {
      "idx": 2,
      "component": 2,
      "transitions": [
        [[],[16,17,14,15,2,8,7]]
      ],
      "type": "normal"
    },
    {
      "idx": 7,
      "component": 7,
      "transitions": [
        [[],[12]]
      ],
      "type": "terminal"
    },
    {
      "idx": 8,
      "component": 6,
      "transitions": [
        [[],[15,12]]
      ],
      "type": "normal"
    },
    {
      "idx": 12,
      "component": 7,
      "transitions": [
        [[],[14]]
      ],
      "type": "normal"
    },
    {
      "idx": 14,
      "component": 7,
      "transitions": [
        [[],[16]]
      ],
      "type": "normal"
    },
    {
      "idx": 15,
      "component": 6,
      "transitions": [
        [[],[17,15]]
      ],
      "type": "normal"
    },
    {
      "idx": 16,
      "component": 7,
      "transitions": [
        [[],[7]]
      ],
      "type": "normal"
    },
    {
      "idx": 17,
      "component": 6,
      "transitions": [
        [[],[8,17]]
      ],
      "type": "normal"
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Push ()",
    "Store synch",
    "Jump 65",
    "Frame cas (p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 20",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 65",
    "Frame Lock ()",
    "DelVar result",
    "Push False",
    "StoreVar result",
    "Return",
    "Jump 65",
    "Frame acquire lk",
    "Push PC(4)",
    "Push ()",
    "Push 0",
    "LoadVar lk",
    "3-ary DictAdd",
    "Push 1",
    "Push False",
    "3-ary DictAdd",
    "Push 2",
    "Push True",
    "3-ary DictAdd",
    "Apply",
    "JumpCond True 46",
    "Jump 32",
    "DelVar lk",
    "Return",
    "Jump 65",
    "Frame release lk",
    "Push PC(4)",
    "Push ()",
    "Push 0",
    "LoadVar lk",
    "DelVar lk",
    "3-ary DictAdd",
    "Push 1",
    "Push True",
    "3-ary DictAdd",
    "Push 2",
    "Push False",
    "3-ary DictAdd",
    "Apply",
    "Pop",
    "Return",
    "Push PC(25)",
    "Push ()",
    "Apply",
    "Store lock",
    "Jump 95",
    "Frame thread ()",
    "Push { False, True }",
    "Choose",
    "JumpCond False 94",
    "Push PC(31)",
    "Push ?lock",
    "Apply",
    "Pop",
    "AtomicInc(eager)",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push PC(78)",
    "1-ary countLabel",
    "Push 1",
    "2-ary ==",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "AtomicDec",
    "Push PC(49)",
    "Push ?lock",
    "Apply",
    "Pop",
    "Jump 71",
    "Return",
    "Push { 1, 2 }",
    "StoreVar $s86",
    "LoadVar $s86",
    "1-ary IsEmpty",
    "JumpCond True 107",
    "Cut($s86, i)",
    "DelVar i",
    "Push PC(70)",
    "Push ()",
    "Push ()",
    "Spawn",
    "Jump 97",
    "DelVar $s86",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "push constant ()",
    "pop a value and store it in shared variable synch",
    "set program counter to 65",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 20 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 65",
    "start of method Lock",
    "delete method variable result",
    "push constant False",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 65",
    "start of method acquire",
    "push constant PC(4)",
    "push constant ()",
    "push constant 0",
    "push the value of lk",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant False",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push constant True",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and jump to 46 if the value is True",
    "set program counter to 32",
    "delete method variable lk",
    "restore caller method state and push result",
    "set program counter to 65",
    "start of method release",
    "push constant PC(4)",
    "push constant ()",
    "push constant 0",
    "push the value of lk",
    "delete method variable lk",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant True",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push constant False",
    "pop 3 values and push the result of applying DictAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "push constant PC(25)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable lock",
    "set program counter to 95",
    "start of method thread",
    "push constant { False, True }",
    "pop a set value and push one of its elements",
    "pop a value and jump to 94 if the value is False",
    "push constant PC(31)",
    "push constant ?lock",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(78)",
    "pop 1 value and push the result of applying countLabel",
    "push constant 1",
    "pop 2 values and push the result of applying ==",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "push constant PC(49)",
    "push constant ?lock",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 71",
    "restore caller method state and push result",
    "push constant { 1, 2 }",
    "pop a value and store in $s86",
    "push the value of $s86",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 107 if the value is True",
    "remove smallest element from $s86 and assign to i",
    "delete method variable i",
    "push constant PC(70)",
    "push constant ()",
    "push constant ()",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "set program counter to 97",
    "delete method variable $s86",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "72": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "43": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "50": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "62": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "42": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "51": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "3": { "file": "caslock.hny", "line": "1", "code": "def cas(p, old, new):" },
    "12": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "56": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "71": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "9": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "41": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "8": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "61": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "13": { "file": "caslock.hny", "line": "4", "code": "    if result:" },
    "52": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "63": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "73": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "11": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "40": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "53": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "10": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "70": { "file": "cssynch.hny", "line": "7", "code": "def thread():" },
    "60": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "108": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "67": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "20": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "109": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "4": { "file": "caslock.hny", "line": "1", "code": "def cas(p, old, new):" },
    "30": { "file": "caslock.hny", "line": "10", "code": "def acquire(lk):" },
    "7": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "6": { "file": "caslock.hny", "line": "2", "code": "  atomically:" },
    "85": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "47": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "17": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "77": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "22": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "32": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "15": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "103": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "39": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "29": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "82": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "92": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "57": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "99": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "5": { "file": "caslock.hny", "line": "2", "code": "  atomically:" },
    "75": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "65": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "55": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "45": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "89": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "18": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "100": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "69": { "file": "cssynch.hny", "line": "7", "code": "def thread():" },
    "96": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "81": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "79": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "25": { "file": "caslock.hny", "line": "7", "code": "def Lock():" },
    "91": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "35": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "49": { "file": "caslock.hny", "line": "14", "code": "def release(lk):" },
    "106": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "78": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "102": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "68": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "107": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "80": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "34": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "101": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "24": { "file": "caslock.hny", "line": "7", "code": "def Lock():" },
    "19": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "90": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "48": { "file": "caslock.hny", "line": "14", "code": "def release(lk):" },
    "27": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "84": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "95": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "37": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "26": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "105": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "94": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "104": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "59": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "97": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "86": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "36": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "87": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "31": { "file": "caslock.hny", "line": "10", "code": "def acquire(lk):" },
    "21": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "16": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "64": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "44": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "74": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "33": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "66": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "76": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "14": { "file": "caslock.hny", "line": "4", "code": "    if result:" },
    "23": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "58": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "46": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "93": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "28": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "83": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "88": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "38": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "54": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "98": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" }
  }
}

;

var boxSize = 10;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + 29) / 30);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > 30 ? 30 : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "( )"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(obj) {
  if (obj.length == 0) {
    return "None";
  }
  var result = "?" + obj[0].value;
  for (var i = 1; i < obj.length; i++) {
    result += "[" + json_string(obj[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  var name = json_string(obj.name);
  var arg = json_string(obj.arg);
  var pc = json_string(obj.pc);
  return "CTX(" + name + "(" + arg + "):" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
    break;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    return json_string_address(obj.value);
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (k == "result" && obj[k].type == "dict" && obj[k].value.length == 0) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    mcell.innerHTML = trace[i].method;
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    vcell.appendChild(vtext);
  }
  if (failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*30 + x + 1;
  run_microsteps()
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var locs = state.locations;
  while (pc >= 0) {
    s = "" + pc;
    if (locs.hasOwnProperty(s)) {
      return locs[s];
    }
    pc--;
  }
  return noloc;
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var t = microsteps.length;
  if (t > 0 && microsteps[t - 1].tid != mas.tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(mas.tid),
    pc: parseInt(mis.pc),
    invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts
  };

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = misidx == 0 ? "running" : microsteps[t-1].mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else if (misidx == 0) {
    microsteps[t].atomic = 0;
  }
  else {
    microsteps[t].atomic = microsteps[t-1].atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else if (misidx == 0) {
    microsteps[t].readonly = 0;
  }
  else {
    microsteps[t].readonly = microsteps[t-1].readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else if (misidx == 0) {
    microsteps[t].interruptlevel = 0;
  }
  else {
    microsteps[t].interruptlevel = microsteps[t-1].interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else if (misidx == 0) {
    microsteps[t].trace = [];
  }
  else {
    microsteps[t].trace = microsteps[t-1].trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace))
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else if (t == 0) {
    microsteps[t].shared = {};
  }
  else {
    microsteps[t].shared = microsteps[t-1].shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else if (misidx == 0) {
    microsteps[t].fp = 0;
  }
  else {
    microsteps[t].fp = microsteps[t-1].fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = microsteps[t-1].stack.slice(0,
                              microsteps[t-1].stack.length - n);
  }
  else if (misidx == 0) {
    microsteps[t].stack = [];
  }
  else {
    microsteps[t].stack = microsteps[t-1].stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
  // microsteps[t].choose = microsteps[t].stack;
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i])
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print)
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var tid = parseInt(mis.contexts[ctx].tid);
    threads[tid].name = mis.contexts[ctx].name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(mis.contexts[ctx]);
  }
  var mes = megasteps[mis.mesidx];
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

  if (mis.invfails.length > 0) {
    inv = mis.invfails[0];
    code = getCode(inv.pc);
    coderow.style.color = "red";
    coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
    mis.cloc = null;
  }
  else {
    coderow.style.color = "blue";
    coderow.innerHTML = mis.code.file + ":" + mis.code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(mis.code.code);
  }

  currCloc = mis.cloc;
  currOffset = mis.offset;
}

function run_microsteps() {
  coderow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
    currCloc = null;
  }
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = "";
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = microsteps[currentTime == 0 ? 0 : (currentTime-1)].mesidx;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes)
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = microsteps[currentTime == 0 ? 0 : (currentTime-1)].tid;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid)
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  megasteps[i] = {
    canvas: canvas,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

        
</script>
</body>
</html>
