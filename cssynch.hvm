{
  "labels": {
    "__end__": "112"
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "synch" }] },
    { "op": "Jump", "pc": "65" },
    { "op": "Frame", "name": "cas", "args": "(p, old, new)" },
    { "op": "DelVar", "value": "result" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "LoadVar", "value": "p" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "old" },
    { "op": "DelVar", "value": "old" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "result" },
    { "op": "JumpCond", "pc": "20", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "new" },
    { "op": "DelVar", "value": "new" },
    { "op": "Store" },
    { "op": "DelVar", "value": "new" },
    { "op": "DelVar", "value": "p" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "65" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "65" },
    { "op": "Frame", "name": "aquire", "args": "lk" },
    { "op": "Push", "value": { "type": "pc", "value": "4" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "JumpCond", "pc": "46", "cond": { "type": "bool", "value": "True" } },
    { "op": "Jump", "pc": "32" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Return" },
    { "op": "Jump", "pc": "65" },
    { "op": "Frame", "name": "release", "args": "lk" },
    { "op": "Push", "value": { "type": "pc", "value": "4" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "lk" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "pc", "value": "25" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Apply" },
    { "op": "Store", "value": [{ "type": "atom", "value": "lock" }] },
    { "op": "Jump", "pc": "97" },
    { "op": "Frame", "name": "thread", "args": "()" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }] } },
    { "op": "Choose" },
    { "op": "JumpCond", "pc": "96", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "synch" }] },
    { "op": "Push", "value": { "type": "atom", "value": "acquire" } },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "lock" }] } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "Push", "value": { "type": "pc", "value": "80" } },
    { "op": "Nary", "arity": 1, "value": "countLabel" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "pc", "value": "49" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "lock" }] } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "Jump", "pc": "71" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": 1 }, { "type": "int", "value": 2 }] } },
    { "op": "StoreVar", "value": "$s88" },
    { "op": "LoadVar", "value": "$s88" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "109", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s88", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "pc", "value": "70" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "99" },
    { "op": "DelVar", "value": "$s88" },
    { "op": "Return" },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__ ()","start of method __init__"],
    ["Push ()","push constant ()"],
    ["Store synch","pop a value and store it in shared variable synch"],
    ["Jump 65","set program counter to 65"],
    ["Frame cas (p, old, new)","start of method cas"],
    ["DelVar result","delete method variable result"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar old","push the value of old"],
    ["DelVar old","delete method variable old"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar result","push the value of result"],
    ["JumpCond False 20","pop a value and jump to 20 if the value is False"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar new","push the value of new"],
    ["DelVar new","delete method variable new"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar new","delete method variable new"],
    ["DelVar p","delete method variable p"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 65","set program counter to 65"],
    ["Frame Lock ()","start of method Lock"],
    ["DelVar result","delete method variable result"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 65","set program counter to 65"],
    ["Frame aquire lk","start of method aquire"],
    ["Push PC(4)","push constant PC(4)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar lk","push the value of lk"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Push False","push constant False"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["Push True","push constant True"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["JumpCond True 46","pop a value and jump to 46 if the value is True"],
    ["Jump 32","set program counter to 32"],
    ["DelVar lk","delete method variable lk"],
    ["Return","restore caller method state and push result"],
    ["Jump 65","set program counter to 65"],
    ["Frame release lk","start of method release"],
    ["Push PC(4)","push constant PC(4)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar lk","push the value of lk"],
    ["DelVar lk","delete method variable lk"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Push True","push constant True"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["Push False","push constant False"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["Return","restore caller method state and push result"],
    ["Push PC(25)","push constant PC(25)"],
    ["Push ()","push constant ()"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store lock","pop a value and store it in shared variable lock"],
    ["Jump 97","set program counter to 97"],
    ["Frame thread ()","start of method thread"],
    ["Push { False, True }","push constant { False, True }"],
    ["Choose","pop a set value and push one of its elements"],
    ["JumpCond False 96","pop a value and jump to 96 if the value is False"],
    ["Load synch","push value of shared variable synch"],
    ["Push \"acquire\"","push constant \"acquire\""],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push ?lock","push constant ?lock"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(80)","push constant PC(80)"],
    ["1-ary countLabel","pop 1 value and push the result of applying countLabel"],
    ["Push 1","push constant 1"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push PC(49)","push constant PC(49)"],
    ["Push ?lock","push constant ?lock"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 71","set program counter to 71"],
    ["Return","restore caller method state and push result"],
    ["Push { 1, 2 }","push constant { 1, 2 }"],
    ["StoreVar $s88","pop a value and store in $s88"],
    ["LoadVar $s88","push the value of $s88"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 109","pop a value and jump to 109 if the value is True"],
    ["Cut($s88, i)","remove smallest element from $s88 and assign to i"],
    ["DelVar i","delete method variable i"],
    ["Push PC(70)","push constant PC(70)"],
    ["Push ()","push constant ()"],
    ["Push ()","push constant ()"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 99","set program counter to 99"],
    ["DelVar $s88","delete method variable $s88"],
    ["Return","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locations": {
    "3": { "file": "caslock.hny", "line": "1", "code": "def cas(p, old, new):" },
    "4": { "file": "caslock.hny", "line": "1", "code": "def cas(p, old, new):" },
    "5": { "file": "caslock.hny", "line": "2", "code": "  atomically:" },
    "6": { "file": "caslock.hny", "line": "2", "code": "  atomically:" },
    "7": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "8": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "9": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "10": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "11": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "12": { "file": "caslock.hny", "line": "3", "code": "    result = !p == old" },
    "13": { "file": "caslock.hny", "line": "4", "code": "    if result:" },
    "14": { "file": "caslock.hny", "line": "4", "code": "    if result:" },
    "15": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "16": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "17": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "18": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "19": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "20": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "21": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "22": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "23": { "file": "caslock.hny", "line": "5", "code": "      !p = new" },
    "24": { "file": "caslock.hny", "line": "7", "code": "def Lock():" },
    "25": { "file": "caslock.hny", "line": "7", "code": "def Lock():" },
    "26": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "27": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "28": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "29": { "file": "caslock.hny", "line": "8", "code": "  result = False" },
    "30": { "file": "caslock.hny", "line": "10", "code": "def aquire(lk):" },
    "31": { "file": "caslock.hny", "line": "10", "code": "def aquire(lk):" },
    "32": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "33": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "34": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "35": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "36": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "37": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "38": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "39": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "40": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "41": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "42": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "43": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "44": { "file": "caslock.hny", "line": "11", "code": "  while not cas(lk, False, True):" },
    "45": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "46": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "47": { "file": "caslock.hny", "line": "12", "code": "    pass" },
    "48": { "file": "caslock.hny", "line": "14", "code": "def release(lk):" },
    "49": { "file": "caslock.hny", "line": "14", "code": "def release(lk):" },
    "50": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "51": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "52": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "53": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "54": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "55": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "56": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "57": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "58": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "59": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "60": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "61": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "62": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "63": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "64": { "file": "caslock.hny", "line": "15", "code": "  cas(lk, True, False)" },
    "65": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "66": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "67": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "68": { "file": "cssynch.hny", "line": "5", "code": "lock = synch.Lock()" },
    "69": { "file": "cssynch.hny", "line": "7", "code": "def thread():" },
    "70": { "file": "cssynch.hny", "line": "7", "code": "def thread():" },
    "71": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "72": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "73": { "file": "cssynch.hny", "line": "8", "code": "    while choose({ False, True }):" },
    "74": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "75": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "76": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "77": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "78": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "79": { "file": "cssynch.hny", "line": "9", "code": "        synch.acquire(?lock)" },
    "80": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "81": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "82": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "83": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "84": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "85": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "86": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "87": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "88": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "89": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "90": { "file": "cssynch.hny", "line": "10", "code": "        cs: assert countLabel(cs) == 1" },
    "91": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "92": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "93": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "94": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "95": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "96": { "file": "cssynch.hny", "line": "11", "code": "        synch.release(?lock)" },
    "97": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "98": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "99": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "100": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "101": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "102": { "file": "cssynch.hny", "line": "13", "code": "for i in {1..NTHREADS}:" },
    "103": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "104": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "105": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "106": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "107": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "108": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "109": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "110": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" },
    "111": { "file": "cssynch.hny", "line": "14", "code": "    spawn thread()" }
  }
}
